{
	"name": "Notebook NET 3",
	"properties": {
		"folder": {
			"name": "New folder"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2"
			}
		},
		"metadata": {
			"saveOutput": true,
			"language_info": {
				"name": "csharp"
			}
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"using Microsoft.Spark.Sql;\n",
					"using Microsoft.Spark.Sql.Types;\n",
					"using static Microsoft.Spark.Sql.Functions;\n",
					"var inputSchema = new StructType(new[]\n",
					"{\n",
					"    new StructField(\"age\", new IntegerType()),\n",
					"    new StructField(\"name\", new StringType())\n",
					"});\n",
					"DataFrame dfWithSchema = spark.Read().Schema(inputSchema).Json(\"abfss://hozhao@hozhao0924gen2.dfs.core.windows.net/people.json\");"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"source": [
					"Display(dfWithSchema);"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"source": [
					"DataFrame df = spark.Read().Option(\"header\", true).Csv(\"abfss://hozhao@hozhao0924gen2.dfs.core.windows.net/diamonds.csv\");\n",
					"df.Show();"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"source": [
					"Display(df);"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"source": [
					"Display(df);"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"source": [
					"DisplayHTML(\"<div><h2 style='color: green'>Hello, Spark NET</h2></div>\")"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"source": [
					"DisplayHTML(\"<div><h2 style='color: green'>???? ????????????????????????U1[?????]U2[????]U3[?????]</h2></div>\")"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"source": [
					"import matplotlib.pyplot as plt\n",
					"\n",
					"\n",
					"def demo_con_style(ax, connectionstyle):\n",
					"    x1, y1 = 0.3, 0.2\n",
					"    x2, y2 = 0.8, 0.6\n",
					"\n",
					"    ax.plot([x1, x2], [y1, y2], \".\")\n",
					"    ax.annotate(\"\",\n",
					"                xy=(x1, y1), xycoords='data',\n",
					"                xytext=(x2, y2), textcoords='data',\n",
					"                arrowprops=dict(arrowstyle=\"->\", color=\"0.5\",\n",
					"                                shrinkA=5, shrinkB=5,\n",
					"                                patchA=None, patchB=None,\n",
					"                                connectionstyle=connectionstyle,\n",
					"                                ),\n",
					"                )\n",
					"\n",
					"    ax.text(.05, .95, connectionstyle.replace(\",\", \",\\n\"),\n",
					"            transform=ax.transAxes, ha=\"left\", va=\"top\")\n",
					"\n",
					"\n",
					"fig, axs = plt.subplots(3, 5, figsize=(8, 4.8))\n",
					"demo_con_style(axs[0, 0], \"angle3,angleA=90,angleB=0\")\n",
					"demo_con_style(axs[1, 0], \"angle3,angleA=0,angleB=90\")\n",
					"demo_con_style(axs[0, 1], \"arc3,rad=0.\")\n",
					"demo_con_style(axs[1, 1], \"arc3,rad=0.3\")\n",
					"demo_con_style(axs[2, 1], \"arc3,rad=-0.3\")\n",
					"demo_con_style(axs[0, 2], \"angle,angleA=-90,angleB=180,rad=0\")\n",
					"demo_con_style(axs[1, 2], \"angle,angleA=-90,angleB=180,rad=5\")\n",
					"demo_con_style(axs[2, 2], \"angle,angleA=-90,angleB=10,rad=5\")\n",
					"demo_con_style(axs[0, 3], \"arc,angleA=-90,angleB=0,armA=30,armB=30,rad=0\")\n",
					"demo_con_style(axs[1, 3], \"arc,angleA=-90,angleB=0,armA=30,armB=30,rad=5\")\n",
					"demo_con_style(axs[2, 3], \"arc,angleA=-90,angleB=0,armA=0,armB=40,rad=0\")\n",
					"demo_con_style(axs[0, 4], \"bar,fraction=0.3\")\n",
					"demo_con_style(axs[1, 4], \"bar,fraction=-0.3\")\n",
					"demo_con_style(axs[2, 4], \"bar,angle=180,fraction=-0.2\")\n",
					"\n",
					"for ax in axs.flat:\n",
					"    ax.set(xlim=(0, 1), ylim=(0, 1), xticks=[], yticks=[], aspect=1)\n",
					"fig.tight_layout(pad=0.2)\n",
					"\n",
					"plt.show()"
				],
				"execution_count": 8
			}
		]
	}
}