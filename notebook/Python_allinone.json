{
	"name": "Python_allinone",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "medium1119",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2"
			}
		},
		"metadata": {
			"saveOutput": true,
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/236a38d3-13a5-4aa5-98fc-bf8e3bb07edb/resourceGroups/bigdataqa/providers/Microsoft.Synapse/workspaces/bdbj1119ws/bigDataPools/medium1119",
				"name": "medium1119",
				"type": "Spark",
				"endpoint": "https://bdbj1119ws.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/medium1119",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "2.4",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56
			}
		},
		"cells": [
			{
				"cell_type": "markdown",
				"source": [
					"# Access data on Azure Data Lake Storage Gen2 (ADLS Gen2) with Synapse Spark\n",
					"\n",
					"Azure Data Lake Storage Gen2 (ADLS Gen2) is used as the storage account associated with a Synapse workspace. A synapse workspace can have a default ADLS Gen2 storage account and additional linked storage accounts. \n",
					"\n",
					"You can access data on ADLS Gen2 with Synapse Spark via following URL:\n",
					"    \n",
					"    abfss://<container_name>@<storage_account_name>.dfs.core.windows.net/<path>\n",
					"\n",
					"This notebook provides examples of how to read data from ADLS Gen2 account into a Spark context and how to write the output of Spark jobs directly into an ADLS Gen2 location.\n",
					"\n",
					"## Pre-requisites\n",
					"Synapse leverage AAD pass-through to access any ADLS Gen2 account (or folder) to which you have a **Blob Storage Contributor** permission. No credentials or access token is required. "
				]
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Load a sample data\n",
					"\n",
					"Let's first load the [public holidays](https://azure.microsoft.com/en-us/services/open-datasets/catalog/public-holidays/) of last 6 months from Azure Open datasets as a sample."
				]
			},
			{
				"cell_type": "code",
				"source": [
					"from azureml.opendatasets import PublicHolidays\n",
					"\n",
					"from datetime import datetime\n",
					"from dateutil import parser\n",
					"from dateutil.relativedelta import relativedelta\n",
					"\n",
					"\n",
					"end_date = datetime.today()\n",
					"start_date = datetime.today() - relativedelta(months=6)\n",
					"hol = PublicHolidays(start_date=start_date, end_date=end_date)\n",
					"hol_df = hol.to_spark_dataframe()"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"source": [
					"# Display 5 rows\n",
					"hol_df.show(5, truncate = False)"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Write data to the default ADLS Gen2 storage\n",
					"\n",
					"We are going to write the spark dateframe to your default ADLS Gen2 storage account.\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql import SparkSession\n",
					"from pyspark.sql.types import *\n",
					"\n",
					"# Primary storage info\n",
					"account_name = 'hozhaobdbj' # fill in your primary account name\n",
					"container_name = 'defaultfs' # fill in your container name\n",
					"relative_path = 'test' # fill in your relative folder path\n",
					"\n",
					"adls_path = 'abfss://%s@%s.dfs.core.windows.net/%s' % (container_name, account_name, relative_path)\n",
					"print('Primary storage account path: ' + adls_path)"
				],
				"execution_count": 7
			},
			{
				"cell_type": "markdown",
				"source": [
					"### Save a dataframe as Parquet, JSON or CSV\n",
					"If you have a dataframe, you can save it to Parquet or JSON with the .write.parquet(), .write.json() and .write.csv() methods respectively.\n",
					"\n",
					"Dataframes can be saved in any format, regardless of the input format.\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"parquet_path = adls_path + 'holiday.parquet'\n",
					"json_path = adls_path + 'holiday.json'\n",
					"csv_path = adls_path + 'holiday.csv'\n",
					"print('parquet file path: ' + parquet_path)\n",
					"print('json file pathï¼š ' + json_path)\n",
					"print('csv file path: ' + csv_path)"
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"source": [
					"hol_df.write.parquet(parquet_path, mode = 'overwrite')\n",
					"hol_df.write.json(json_path, mode = 'overwrite')\n",
					"hol_df.write.csv(csv_path, mode = 'overwrite', header = 'true')"
				],
				"execution_count": 9
			},
			{
				"cell_type": "markdown",
				"source": [
					"### Save a dataframe as text files\n",
					"If you have a dataframe that you want ot save as text file, you must first covert it to an RDD and then save that RDD as a text file.\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"# Define the text file path\n",
					"text_path = adls_path + 'holiday1124.txt'\n",
					"print('text file path: ' + text_path)"
				],
				"execution_count": 10
			},
			{
				"cell_type": "code",
				"source": [
					"# Covert spark dataframe into RDD \n",
					"hol_RDD = hol_df.rdd\n",
					"type(hol_RDD)"
				],
				"execution_count": 6
			},
			{
				"cell_type": "markdown",
				"source": [
					"If you have an RDD, you can convert it to a text file like the following:\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					" # Save RDD as text file\n",
					"hol_RDD.saveAsTextFile(text_path)"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"# Read data from the default ADLS Gen2 storage\n",
					""
				]
			},
			{
				"cell_type": "markdown",
				"source": [
					"### Create a dataframe from parquet files\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"df_parquet = spark.read.parquet(parquet_path)"
				],
				"execution_count": 11
			},
			{
				"cell_type": "markdown",
				"source": [
					"### Create a dataframe from JSON files\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"df_json = spark.read.json(json_path)"
				],
				"execution_count": 12
			},
			{
				"cell_type": "markdown",
				"source": [
					"### Create a dataframe from CSV files\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"df_csv = spark.read.csv(csv_path, header = 'true')"
				],
				"execution_count": 13
			},
			{
				"cell_type": "markdown",
				"source": [
					"### Create an RDD from text file\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"text = sc.textFile(text_path)"
				],
				"execution_count": 14
			},
			{
				"cell_type": "markdown",
				"source": [
					"# Access data on Azure Storage Blob (WASB) with Synapse Spark\n",
					"\n",
					"You can access data on Azure Storage Blob (WASB) with Synapse Spark via following URL:\n",
					"\n",
					"    wasb[s]://<container_name>@<storage_account_name>.blob.core.windows.net/<path>\n",
					"\n",
					"This notebook provides examples of how to read data from WASB into a Spark context and how to write the output of Spark jobs directly into a WASB location."
				]
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Load a sample data\n",
					"\n",
					"Let's first load the [public holidays](https://azure.microsoft.com/en-us/services/open-datasets/catalog/public-holidays/) of last 6 months from Azure Open datasets as a sample."
				]
			},
			{
				"cell_type": "code",
				"source": [
					"from azureml.opendatasets import PublicHolidays\n",
					"\n",
					"from datetime import datetime\n",
					"from dateutil import parser\n",
					"from dateutil.relativedelta import relativedelta\n",
					"\n",
					"\n",
					"end_date = datetime.today()\n",
					"start_date = datetime.today() - relativedelta(months=6)\n",
					"hol = PublicHolidays(start_date=start_date, end_date=end_date)\n",
					"hol_df = hol.to_spark_dataframe()"
				],
				"execution_count": 15
			},
			{
				"cell_type": "code",
				"source": [
					"# Display 5 rows\n",
					"hol_df.show(5, truncate = False)"
				],
				"execution_count": 16
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Write data to Azure Storage Blob\n",
					"\n",
					"We are going to write the spark dateframe to your Azure Blob Storage (WASB) path using **shared access signature (sas)**. Go to [Azure Portal](https://portal.azure.com/), open your Azure storage blob, select **shared access signature** in the **settings** and generate your sas token. Please make sure to allow contatiner level read and write permission. Fill in the access info for your Azure storage blob in the cell below. \n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql import SparkSession\n",
					"from pyspark.sql.types import *\n",
					"\n",
					"# Azure storage access info\n",
					"blob_account_name = 'samplenbblob' # replace with your blob name\n",
					"blob_container_name = 'data' # replace with your container name\n",
					"blob_relative_path = 'samplenb/' # replace with your relative folder path\n",
					"blob_sas_token = r'?sv=2019-02-02&ss=b&srt=sco&sp=rwdlac&se=2021-03-23T17:05:16Z&st=2020-03-24T09:05:16Z&spr=https,http&sig=drtIrL68s07nPW0Q9WEb5XFL6y5Eb7%2BOpmpxGyAHLaw%3D'"
				],
				"execution_count": 17
			},
			{
				"cell_type": "code",
				"source": [
					"# Allow SPARK to access from Blob remotely\n",
					"wasbs_path = 'wasbs://%s@%s.blob.core.windows.net/%s' % (blob_container_name, blob_account_name, blob_relative_path)\n",
					"spark.conf.set('fs.azure.sas.%s.%s.blob.core.windows.net' % (blob_container_name, blob_account_name), blob_sas_token)\n",
					"print('Remote blob path: ' + wasbs_path)"
				],
				"execution_count": 18
			},
			{
				"cell_type": "markdown",
				"source": [
					"### Save a dataframe as Parquet, JSON or CSV\n",
					"If you have a dataframe, you can save it to Parquet or JSON with the .write.parquet(), .write.json() and .write.csv() methods respectively.\n",
					"\n",
					"Dataframes can be saved in any format, regardless of the input format.\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"parquet_path = wasbs_path + 'holiday.parquet'\n",
					"json_path = wasbs_path + 'holiday.json'\n",
					"csv_path = wasbs_path + 'holiday.csv'\n",
					"print('parquet file path: ' + parquet_path)\n",
					"print('json file pathï¼š ' + json_path)\n",
					"print('csv file path: ' + csv_path)"
				],
				"execution_count": 19
			},
			{
				"cell_type": "code",
				"source": [
					"hol_df.write.parquet(parquet_path, mode = 'overwrite')\n",
					"hol_df.write.json(json_path, mode = 'overwrite')\n",
					"hol_df.write.csv(csv_path, mode = 'overwrite', header = 'true')"
				],
				"execution_count": 20
			},
			{
				"cell_type": "markdown",
				"source": [
					"### Save a dataframe as text files\n",
					"If you have a dataframe that you want ot save as text file, you must first covert it to an RDD and then save that RDD as a text file.\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"# Define the text file path\n",
					"text_path = wasbs_path + 'holiday1124.txt'\n",
					"print('text file path: ' + text_path)"
				],
				"execution_count": 21
			},
			{
				"cell_type": "code",
				"source": [
					"# Covert spark dataframe into RDD \n",
					"hol_RDD = hol_df.rdd\n",
					"type(hol_RDD)"
				],
				"execution_count": 22
			},
			{
				"cell_type": "markdown",
				"source": [
					"If you have an RDD, you can convert it to a text file like the following:\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					" # Save RDD as text file\n",
					"hol_RDD.saveAsTextFile(text_path)"
				],
				"execution_count": 23
			},
			{
				"cell_type": "markdown",
				"source": [
					"# Read data from Azure Storage Blob\n",
					""
				]
			},
			{
				"cell_type": "markdown",
				"source": [
					"### Create a dataframe from parquet files\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"df_parquet = spark.read.parquet(parquet_path)"
				],
				"execution_count": 24
			},
			{
				"cell_type": "markdown",
				"source": [
					"### Create a dataframe from JSON files\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"df_json = spark.read.json(json_path)"
				],
				"execution_count": 25
			},
			{
				"cell_type": "markdown",
				"source": [
					"### Create a dataframe from CSV files\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"df_csv = spark.read.csv(csv_path, header = 'true')"
				],
				"execution_count": 26
			},
			{
				"cell_type": "markdown",
				"source": [
					"### Create an RDD from text file\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"text = sc.textFile(text_path)"
				],
				"execution_count": 27
			},
			{
				"cell_type": "markdown",
				"source": [
					"# Using Linux Foundation Delta Lake in Azure Synapse Analytics Spark\n",
					"Azure Synapse is compatible with Linux Foundation Delta Lake. Delta Lake is an open-source storage layer that brings ACID (atomicity, consistency, isolation, and durability) transactions to Apache Spark and big data workloads.\n",
					"\n",
					"This notebook provides examples of how to update, merge and delete delta lake tables in Synapse.\n",
					"\n",
					"## Pre-requisites\n",
					"In this notebook you will save your tables in Delta Lake format to your workspace's primary storage account. You are required to be a **Blob Storage Contributor** in the ADLS Gen2 account (or folder) you will access.\n",
					""
				]
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Load sample data\n",
					"\n",
					"First you will load the [public holidays](https://azure.microsoft.com/en-us/services/open-datasets/catalog/public-holidays/) data from last 6 months via Azure Open datasets.\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"from azureml.opendatasets import PublicHolidays\n",
					"\n",
					"from datetime import datetime\n",
					"from dateutil import parser\n",
					"from dateutil.relativedelta import relativedelta\n",
					"\n",
					"\n",
					"end_date = datetime.today()\n",
					"start_date = datetime.today() - relativedelta(months=6)\n",
					"hol = PublicHolidays(start_date=start_date, end_date=end_date)\n",
					"hol_df = hol.to_spark_dataframe()"
				],
				"execution_count": 28
			},
			{
				"cell_type": "code",
				"metadata": {
					"diagram": {
						"activateDiagramType": 2,
						"chartConfig": {
							"category": "scatter",
							"keys": [
								"countryOrRegion"
							],
							"values": [
								"date"
							],
							"yLabel": "date",
							"xLabel": "countryOrRegion",
							"aggregation": "SUM",
							"aggByBackend": false,
							"isValid": true,
							"inValidMsg": null
						},
						"aggData": "{\"date\":{\"Argentina\":0,\"Austria\":0,\"Belarus\":0,\"Belgium\":0,\"Brazil\":0,\"Canada\":0,\"Colombia\":0,\"Croatia\":0,\"Czech\":0,\"Denmark\":0,\"England\":0,\"Finland\":0,\"France\":0,\"Germany\":0,\"Hungary\":0,\"India\":0,\"Ireland\":0,\"Isle of Man\":0,\"Italy\":0,\"Japan\":0,\"Mexico\":0,\"Netherlands\":0,\"New Zealand\":0,\"Northern Ireland\":0,\"Norway\":0,\"Poland\":0,\"Portugal\":0,\"Scotland\":0,\"Slovenia\":0,\"South Africa\":0,\"Spain\":0,\"Sweden\":0,\"Switzerland\":0,\"Ukraine\":0,\"United Kingdom\":0,\"United States\":0,\"Wales\":0}}",
						"isSummary": false,
						"previewData": {
							"filter": {
								"keyword": "SE",
								"column": null
							}
						},
						"isSql": false
					}
				},
				"source": [
					"display(hol_df)"
				],
				"execution_count": 29
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Write data to the Delta Lake table\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"# Set the strorage path info\n",
					"# Primary storage info\n",
					"account_name = 'hozhaobdbj' # fill in your primary storage account name\n",
					"container_name = 'defaultfs' # fill in your container name\n",
					"relative_path = 'test' # fill in your relative folder path\n",
					"\n",
					"adls_path = 'abfss://%s@%s.dfs.core.windows.net/%s' % (container_name, account_name, relative_path)\n",
					"print('Primary storage account path: ' + adls_path)\n",
					"\n",
					"# Delta Lake relative path\n",
					"delta_relative_path = adls_path + 'delta/holiday/'\n",
					"print('Delta Lake path: ' + delta_relative_path)"
				],
				"execution_count": 30
			},
			{
				"cell_type": "code",
				"source": [
					"# Filter out indian holidays\n",
					"hol_df_IN = hol_df[(hol_df.countryRegionCode == \"IN\")]\n",
					"hol_df_IN.show(5, truncate = False)"
				],
				"execution_count": 31
			},
			{
				"cell_type": "code",
				"source": [
					"#Let's write the data in the Delta Lake table. \n",
					"hol_df_IN.write.mode(\"overwrite\").format(\"delta\").partitionBy(\"holidayName\").save(delta_relative_path)"
				],
				"execution_count": 32
			},
			{
				"cell_type": "code",
				"source": [
					"delta_data = spark.read.format(\"delta\").load(delta_relative_path)\n",
					"delta_data.show()"
				],
				"execution_count": 33
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Overwrite the entire Delta Lake table\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"#Let's overwrite the entire delta file with 1 record\n",
					"\n",
					"hol_df_JP= hol_df[(hol_df.countryRegionCode == \"JP\")]\n",
					"hol_df_JP.write.format(\"delta\").mode(\"overwrite\").save(delta_relative_path)"
				],
				"execution_count": 34
			},
			{
				"cell_type": "code",
				"source": [
					"delta_data = spark.read.format(\"delta\").load(delta_relative_path)\n",
					"delta_data.show()"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Merge new data based on given merge condition "
				]
			},
			{
				"cell_type": "code",
				"source": [
					"# Upsert (merge) the United States' holiday data with Japan's\n",
					" \n",
					"from delta.tables import *\n",
					"\n",
					"deltaTable = DeltaTable.forPath(spark,delta_relative_path)\n",
					"\n",
					"hol_df_US= hol_df[(hol_df.countryRegionCode == \"US\")]\n",
					"\n",
					"\n",
					"deltaTable.alias(\"hol_df_JP\").merge(\n",
					"     source = hol_df_US.alias(\"hol_df_US\"),\n",
					"     condition = \"hol_df_JP.countryRegionCode = hol_df_US.countryRegionCode\"\n",
					"    ).whenMatchedUpdate(set = \n",
					"    {}).whenNotMatchedInsert( values = \n",
					"    {\n",
					"        \"countryOrRegion\" : \"hol_df_US.countryOrRegion\",\n",
					"        \"holidayName\" : \"hol_df_US.holidayName\",\n",
					"        \"normalizeHolidayName\" : \"hol_df_US.normalizeHolidayName\",\n",
					"        \"isPaidTimeOff\":\"hol_df_US.isPaidTimeOff\",\n",
					"        \"countryRegionCode\":\"hol_df_US.countryRegionCode\",\n",
					"        \"date\":\"hol_df_US.date\"\n",
					"    }\n",
					"    ).execute()\n",
					"\n",
					"\n",
					"deltaTable.toDF().show()"
				],
				"execution_count": 36
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Update table on the rows that match the given condition\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"# Update column the 'null' value in 'isPaidTimeOff' with 'false'\n",
					"\n",
					"from pyspark.sql.functions import *\n",
					"deltaTable.update(\n",
					"    condition = (col(\"isPaidTimeOff\").isNull()),\n",
					"    set = {\"isPaidTimeOff\": \"false\"})\n",
					"\n",
					"deltaTable.toDF().show()"
				],
				"execution_count": 37
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Delete data from the table that match the given condition\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"print(\"Row count before delete: \")\n",
					"print(deltaTable.toDF().count())\n",
					"\n",
					"\n",
					"# Delte data with date later than 2020-01-01\n",
					"deltaTable.delete (\"date > '2020-01-01'\")\n",
					"\n",
					"\n",
					"print(\"Row count after delete:  \")\n",
					"print(deltaTable.toDF().count())\n",
					"deltaTable.toDF().show()"
				],
				"execution_count": 38
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Get the operation history of the delta table\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"fullHistoryDF = deltaTable.history()\n",
					"lastOperationDF = deltaTable.history(1)\n",
					"\n",
					"print('Full history DF: ')\n",
					"fullHistoryDF.show(truncate = False)\n",
					"\n",
					"print('lastOperationDF: ')\n",
					"lastOperationDF.show(truncate = False)"
				],
				"execution_count": 39
			},
			{
				"cell_type": "markdown",
				"source": [
					"# Using Azure Open Datasets in Synapse - Enrich NYC Green Taxi Data with Holiday and Weather\n",
					"\n",
					"Synapse has [Azure Open Datasets](https://azure.microsoft.com/en-us/services/open-datasets/) package pre-installed. This notebook provides examples of how to enrich NYC Green Taxi Data with Holiday and Weather with focusing on :\n",
					"- read Azure Open Dataset\n",
					"- manipulate the data to prepare for further analysis, including column projection, filtering, grouping and joins etc. \n",
					"- create a Spark table to be used in other notebooks for modeling training"
				]
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Data loading \n",
					"Let's first load the [NYC green taxi trip records](https://azure.microsoft.com/en-us/services/open-datasets/catalog/nyc-taxi-limousine-commission-green-taxi-trip-records/). The Open Datasets package contains a class representing each data source (NycTlcGreen for example) to easily filter date parameters before downloading."
				]
			},
			{
				"cell_type": "code",
				"source": [
					"from azureml.opendatasets import NycTlcGreen\n",
					"\n",
					"from datetime import datetime\n",
					"from dateutil import parser\n",
					"end_date = parser.parse('2018-06-06')\n",
					"start_date = parser.parse('2018-05-01')\n",
					"\n",
					"nyc_tlc = NycTlcGreen(start_date=start_date, end_date=end_date)\n",
					"nyc_tlc_df = nyc_tlc.to_spark_dataframe()"
				],
				"execution_count": 40
			},
			{
				"cell_type": "code",
				"source": [
					"# Display 5 rows\n",
					"\n",
					"nyc_tlc_df.show(5, truncate = False)"
				],
				"execution_count": 41
			},
			{
				"cell_type": "markdown",
				"source": [
					"Now that the initial data is loaded. Let's do some projection on the data to \n",
					"- create new columns for the month number, day of month, day of week, and hour of day. These info is going to be used in the training model to factor in time-based seasonality.\n",
					"- add a static feature for the country code to join holiday data. "
				]
			},
			{
				"cell_type": "code",
				"source": [
					"# Extract month, day of month, and day of week from pickup datetime and add a static column for the country code to join holiday data. \n",
					"\n",
					"import pyspark.sql.functions as f\n",
					"\n",
					"nyc_tlc_df_expand = nyc_tlc_df.withColumn('datetime',f.to_date('lpepPickupDatetime'))\\\n",
					"                .withColumn('month_num',f.month(nyc_tlc_df.lpepPickupDatetime))\\\n",
					"                .withColumn('day_of_month',f.dayofmonth(nyc_tlc_df.lpepPickupDatetime))\\\n",
					"                .withColumn('day_of_week',f.dayofweek(nyc_tlc_df.lpepPickupDatetime))\\\n",
					"                .withColumn('hour_of_day',f.hour(nyc_tlc_df.lpepPickupDatetime))\\\n",
					"                .withColumn('country_code',f.lit('US'))"
				],
				"execution_count": 42
			},
			{
				"cell_type": "markdown",
				"source": [
					"Remove some of the columns that won't need for modeling or additional feature building.\n",
					"\n",
					"\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"# Remove unused columns from nyc green taxi data\n",
					"\n",
					"columns_to_remove = [\"lpepDropoffDatetime\", \"puLocationId\", \"doLocationId\", \"pickupLongitude\", \n",
					"                     \"pickupLatitude\", \"dropoffLongitude\",\"dropoffLatitude\" ,\"rateCodeID\", \n",
					"                     \"storeAndFwdFlag\",\"paymentType\", \"fareAmount\", \"extra\", \"mtaTax\",\n",
					"                     \"improvementSurcharge\", \"tollsAmount\", \"ehailFee\", \"tripType \"  \n",
					"                    ]\n",
					"\n",
					"nyc_tlc_df_clean = nyc_tlc_df_expand.select([column for column in nyc_tlc_df_expand.columns if column not in columns_to_remove])"
				],
				"execution_count": 43
			},
			{
				"cell_type": "code",
				"source": [
					"# Display 5 rows\n",
					"nyc_tlc_df_clean.show(5)"
				],
				"execution_count": 44
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Enrich with holiday data\n",
					"Now that we have taxi data downloaded and roughly prepared, add in holiday data as additional features. Holiday-specific features will assist model accuracy, as major holidays are times where taxi demand increases dramatically and supply becomes limited. \n",
					"\n",
					"Let's load the [public holidays](https://azure.microsoft.com/en-us/services/open-datasets/catalog/public-holidays/) from Azure Open datasets.\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"from azureml.opendatasets import PublicHolidays\n",
					"\n",
					"hol = PublicHolidays(start_date=start_date, end_date=end_date)\n",
					"hol_df = hol.to_spark_dataframe()\n",
					"\n",
					"# Display data\n",
					"hol_df.show(5, truncate = False)"
				],
				"execution_count": 45
			},
			{
				"cell_type": "markdown",
				"source": [
					"Rename the countryRegionCode and date columns to match the respective field names from the taxi data, and also normalize the time so it can be used as a key. "
				]
			},
			{
				"cell_type": "code",
				"source": [
					"hol_df_clean = hol_df.withColumnRenamed('countryRegionCode','country_code')\\\n",
					"            .withColumn('datetime',f.to_date('date'))\n",
					"\n",
					"hol_df_clean.show(5)"
				],
				"execution_count": 46
			},
			{
				"cell_type": "markdown",
				"source": [
					"Next, join the holiday data with the taxi data by performing a left-join. This will preserve all records from taxi data, but add in holiday data where it exists for the corresponding datetime and country_code, which in this case is always \"US\". Preview the data to verify that they were merged correctly."
				]
			},
			{
				"cell_type": "code",
				"source": [
					"# enrich taxi data with holiday data\n",
					"nyc_taxi_holiday_df = nyc_tlc_df_clean.join(hol_df_clean, on = ['datetime', 'country_code'] , how = 'left')\n",
					"\n",
					"nyc_taxi_holiday_df.show(5)"
				],
				"execution_count": 47
			},
			{
				"cell_type": "code",
				"source": [
					"# Create a temp table and filter out non empty holiday rows\n",
					"\n",
					"nyc_taxi_holiday_df.createOrReplaceTempView(\"nyc_taxi_holiday_df\")\n",
					"spark.sql(\"SELECT * from nyc_taxi_holiday_df WHERE holidayName is NOT NULL \").show(5, truncate = False)"
				],
				"execution_count": 48
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Enrich with weather dataÂ¶\n",
					"\n",
					"Now we append NOAA surface weather data to the taxi and holiday data. Use a similar approach to fetch the [NOAA weather history data](https://azure.microsoft.com/en-us/services/open-datasets/catalog/noaa-integrated-surface-data/) from Azure Open Datasets. "
				]
			},
			{
				"cell_type": "code",
				"source": [
					"from azureml.opendatasets import NoaaIsdWeather\n",
					"\n",
					"isd = NoaaIsdWeather(start_date, end_date)\n",
					"isd_df = isd.to_spark_dataframe()"
				],
				"execution_count": 49
			},
			{
				"cell_type": "code",
				"source": [
					"isd_df.show(5, truncate = False)"
				],
				"execution_count": 50
			},
			{
				"cell_type": "code",
				"source": [
					"# Filter out weather info for new york city, remove the recording with null temperature \n",
					"\n",
					"weather_df = isd_df.filter(isd_df.latitude >= '40.53')\\\n",
					"                        .filter(isd_df.latitude <= '40.88')\\\n",
					"                        .filter(isd_df.longitude >= '-74.09')\\\n",
					"                        .filter(isd_df.longitude <= '-73.72')\\\n",
					"                        .filter(isd_df.temperature.isNotNull())\\\n",
					"                        .withColumnRenamed('datetime','datetime_full')\n",
					"                         "
				],
				"execution_count": 51
			},
			{
				"cell_type": "code",
				"source": [
					"# Remove unused columns\n",
					"\n",
					"columns_to_remove_weather = [\"usaf\", \"wban\", \"longitude\", \"latitude\"]\n",
					"weather_df_clean = weather_df.select([column for column in weather_df.columns if column not in columns_to_remove_weather])\\\n",
					"                        .withColumn('datetime',f.to_date('datetime_full'))\n",
					"\n",
					"weather_df_clean.show(5, truncate = False)"
				],
				"execution_count": 52
			},
			{
				"cell_type": "markdown",
				"source": [
					"Next group the weather data so that you have daily aggregated weather values. \n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"# Enrich weather data with aggregation statistics\n",
					"\n",
					"aggregations = {\"snowDepth\": \"mean\", \"precipTime\": \"max\", \"temperature\": \"mean\", \"precipDepth\": \"max\"}\n",
					"weather_df_grouped = weather_df_clean.groupby(\"datetime\").agg(aggregations)"
				],
				"execution_count": 53
			},
			{
				"cell_type": "code",
				"source": [
					"weather_df_grouped.show(5)"
				],
				"execution_count": 54
			},
			{
				"cell_type": "code",
				"source": [
					"# Rename columns\n",
					"\n",
					"weather_df_grouped = weather_df_grouped.withColumnRenamed('avg(snowDepth)','avg_snowDepth')\\\n",
					"                                       .withColumnRenamed('avg(temperature)','avg_temperature')\\\n",
					"                                       .withColumnRenamed('max(precipTime)','max_precipTime')\\\n",
					"                                       .withColumnRenamed('max(precipDepth)','max_precipDepth')"
				],
				"execution_count": 55
			},
			{
				"cell_type": "markdown",
				"source": [
					"Merge the taxi and holiday data you prepared with the new weather data. This time you only need the datetime key, and again perform a left-join of the data. Run the describe() function on the new dataframe to see summary statistics for each field."
				]
			},
			{
				"cell_type": "code",
				"source": [
					"# enrich taxi data with weather\n",
					"nyc_taxi_holiday_weather_df = nyc_taxi_holiday_df.join(weather_df_grouped, on = 'datetime' , how = 'left')\n",
					"nyc_taxi_holiday_weather_df.cache()"
				],
				"execution_count": 56
			},
			{
				"cell_type": "code",
				"source": [
					"nyc_taxi_holiday_weather_df.show(5)"
				],
				"execution_count": 57
			},
			{
				"cell_type": "code",
				"metadata": {
					"diagram": {
						"activateDiagramType": 1,
						"chartConfig": {
							"category": "bar",
							"keys": [
								"summary"
							],
							"values": [
								"summary"
							],
							"yLabel": "summary",
							"xLabel": "summary",
							"aggregation": "COUNT",
							"aggByBackend": false
						},
						"aggData": "{\"summary\":{\"count\":1,\"max\":1,\"mean\":1,\"min\":1,\"stddev\":1}}",
						"isSummary": false,
						"previewData": {
							"filter": null
						},
						"isSql": false
					}
				},
				"source": [
					"# Run the describe() function on the new dataframe to see summary statistics for each field.\n",
					"\n",
					"display(nyc_taxi_holiday_weather_df.describe())"
				],
				"execution_count": 58
			},
			{
				"cell_type": "markdown",
				"source": [
					"The summary statistics shows that the totalAmount field has negative values, which don't make sense in the context.\n",
					"\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"# Remove invalid rows with less than 0 taxi fare or tip\n",
					"final_df = nyc_taxi_holiday_weather_df.filter(nyc_taxi_holiday_weather_df.tipAmount > 0)\\\n",
					"                                      .filter(nyc_taxi_holiday_weather_df.totalAmount > 0)"
				],
				"execution_count": 59
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Cleaning up the existing Database\n",
					"\n",
					"First we need to drop the tables since Spark requires that a database is empty before we can drop the Database.\n",
					"\n",
					"Then we recreate the database and set the default database context to it."
				]
			},
			{
				"cell_type": "code",
				"source": [
					"spark.sql(\"DROP TABLE IF EXISTS NYCTaxi.nyc_taxi_holiday_weather\"); "
				],
				"execution_count": 60
			},
			{
				"cell_type": "code",
				"source": [
					"spark.sql(\"DROP DATABASE IF EXISTS NYCTaxi\"); \n",
					"spark.sql(\"CREATE DATABASE NYCTaxi\"); \n",
					"spark.sql(\"USE NYCTaxi\");"
				],
				"execution_count": 61
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Creating a new table\n",
					"We create a nyc_taxi_holiday_weather table from the nyc_taxi_holiday_weather dataframe.\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql import SparkSession\n",
					"from pyspark.sql.types import *\n",
					"\n",
					"final_df.write.saveAsTable(\"nyc_taxi_holiday_weather\");\n",
					"spark.sql(\"SELECT COUNT(*) FROM nyc_taxi_holiday_weather\").show();"
				],
				"execution_count": 62
			},
			{
				"cell_type": "markdown",
				"source": [
					"# Charting in Synapse Notebook\n",
					"\n",
					"Synapse has common used data visualization packages pre installed, such as **matplotlib**, **bokeh**, **seaborn**, **altair**, **plotly**. This notebook provides examples to do data visualization using charts in Synapse notebook. \n",
					""
				]
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Matplotlib\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"# Line charts\n",
					"\n",
					"import matplotlib.pyplot as plt\n",
					" \n",
					"x  = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n",
					"y1 = [1, 3, 5, 3, 1, 3, 5, 3, 1]\n",
					"y2 = [2, 4, 6, 4, 2, 4, 6, 4, 2]\n",
					"plt.plot(x, y1, label=\"line L\")\n",
					"plt.plot(x, y2, label=\"line H\")\n",
					"plt.plot()\n",
					"\n",
					"plt.xlabel(\"x axis\")\n",
					"plt.ylabel(\"y axis\")\n",
					"plt.title(\"Line Graph Example\")\n",
					"plt.legend()\n",
					"plt.show()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"# Bar chart\n",
					"\n",
					"import matplotlib.pyplot as plt\n",
					"\n",
					"# Look at index 4 and 6, which demonstrate overlapping cases.\n",
					"x1 = [1, 3, 4, 5, 6, 7, 9]\n",
					"y1 = [4, 7, 2, 4, 7, 8, 3]\n",
					"\n",
					"x2 = [2, 4, 6, 8, 10]\n",
					"y2 = [5, 6, 2, 6, 2]\n",
					"\n",
					"# Colors: https://matplotlib.org/api/colors_api.html\n",
					"\n",
					"plt.bar(x1, y1, label=\"Blue Bar\", color='b')\n",
					"plt.bar(x2, y2, label=\"Green Bar\", color='g')\n",
					"plt.plot()\n",
					"\n",
					"plt.xlabel(\"bar number\")\n",
					"plt.ylabel(\"bar height\")\n",
					"plt.title(\"Bar Chart Example\")\n",
					"plt.legend()\n",
					"plt.show()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"# Histogram\n",
					"\n",
					"import matplotlib.pyplot as plt\n",
					"import numpy as np\n",
					"\n",
					"# Use numpy to generate a bunch of random data in a bell curve around 5.\n",
					"n = 5 + np.random.randn(1000)\n",
					"\n",
					"m = [m for m in range(len(n))]\n",
					"plt.bar(m, n)\n",
					"plt.title(\"Raw Data\")\n",
					"plt.show()\n",
					"\n",
					"plt.hist(n, bins=20)\n",
					"plt.title(\"Histogram\")\n",
					"plt.show()\n",
					"\n",
					"plt.hist(n, cumulative=True, bins=20)\n",
					"plt.title(\"Cumulative Histogram\")\n",
					"plt.show()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"# Scatter chart\n",
					"\n",
					"import matplotlib.pyplot as plt\n",
					"\n",
					"x1 = [2, 3, 4]\n",
					"y1 = [5, 5, 5]\n",
					"\n",
					"x2 = [1, 2, 3, 4, 5]\n",
					"y2 = [2, 3, 2, 3, 4]\n",
					"y3 = [6, 8, 7, 8, 7]\n",
					"\n",
					"# Markers: https://matplotlib.org/api/markers_api.html\n",
					"\n",
					"plt.scatter(x1, y1)\n",
					"plt.scatter(x2, y2, marker='v', color='r')\n",
					"plt.scatter(x2, y3, marker='^', color='m')\n",
					"plt.title('Scatter Plot Example')\n",
					"plt.show()\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"# Stack plots\n",
					"\n",
					"import matplotlib.pyplot as plt\n",
					"\n",
					"idxes = [ 1,  2,  3,  4,  5,  6,  7,  8,  9]\n",
					"arr1  = [23, 40, 28, 43,  8, 44, 43, 18, 17]\n",
					"arr2  = [17, 30, 22, 14, 17, 17, 29, 22, 30]\n",
					"arr3  = [15, 31, 18, 22, 18, 19, 13, 32, 39]\n",
					"\n",
					"# Adding legend for stack plots is tricky.\n",
					"plt.plot([], [], color='r', label = 'D 1')\n",
					"plt.plot([], [], color='g', label = 'D 2')\n",
					"plt.plot([], [], color='b', label = 'D 3')\n",
					"\n",
					"plt.stackplot(idxes, arr1, arr2, arr3, colors= ['r', 'g', 'b'])\n",
					"plt.title('Stack Plot Example')\n",
					"plt.legend()\n",
					"plt.show()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"# Pie charts\n",
					"\n",
					"import matplotlib.pyplot as plt\n",
					"\n",
					"labels = 'S1', 'S2', 'S3'\n",
					"sections = [56, 66, 24]\n",
					"colors = ['c', 'g', 'y']\n",
					"\n",
					"plt.pie(sections, labels=labels, colors=colors,\n",
					"        startangle=90,\n",
					"        explode = (0, 0.1, 0),\n",
					"        autopct = '%1.2f%%')\n",
					"\n",
					"plt.axis('equal') # Try commenting this out.\n",
					"plt.title('Pie Chart Example')\n",
					"plt.show()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"# fill_between and alpha\n",
					"\n",
					"import matplotlib.pyplot as plt\n",
					"import numpy as np\n",
					"\n",
					"ys = 200 + np.random.randn(100)\n",
					"x = [x for x in range(len(ys))]\n",
					"\n",
					"plt.plot(x, ys, '-')\n",
					"plt.fill_between(x, ys, 195, where=(ys > 195), facecolor='g', alpha=0.6)\n",
					"\n",
					"plt.title(\"Fills and Alpha Example\")\n",
					"plt.show()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"# Subplotting using Subplot2grid\n",
					"\n",
					"import matplotlib.pyplot as plt\n",
					"import numpy as np\n",
					"\n",
					"def random_plots():\n",
					"  xs = []\n",
					"  ys = []\n",
					"  \n",
					"  for i in range(20):\n",
					"    x = i\n",
					"    y = np.random.randint(10)\n",
					"    \n",
					"    xs.append(x)\n",
					"    ys.append(y)\n",
					"  \n",
					"  return xs, ys\n",
					"\n",
					"fig = plt.figure()\n",
					"ax1 = plt.subplot2grid((5, 2), (0, 0), rowspan=1, colspan=2)\n",
					"ax2 = plt.subplot2grid((5, 2), (1, 0), rowspan=3, colspan=2)\n",
					"ax3 = plt.subplot2grid((5, 2), (4, 0), rowspan=1, colspan=1)\n",
					"ax4 = plt.subplot2grid((5, 2), (4, 1), rowspan=1, colspan=1)\n",
					"\n",
					"x, y = random_plots()\n",
					"ax1.plot(x, y)\n",
					"\n",
					"x, y = random_plots()\n",
					"ax2.plot(x, y)\n",
					"\n",
					"x, y = random_plots()\n",
					"ax3.plot(x, y)\n",
					"\n",
					"x, y = random_plots()\n",
					"ax4.plot(x, y)\n",
					"\n",
					"plt.tight_layout()\n",
					"plt.show()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"# 3D Scatter Plots\n",
					"\n",
					"import matplotlib.pyplot as plt\n",
					"import numpy as np\n",
					"from mpl_toolkits.mplot3d import axes3d\n",
					"\n",
					"fig = plt.figure()\n",
					"ax = fig.add_subplot(111, projection = '3d')\n",
					"\n",
					"x1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n",
					"y1 = np.random.randint(10, size=10)\n",
					"z1 = np.random.randint(10, size=10)\n",
					"\n",
					"x2 = [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]\n",
					"y2 = np.random.randint(-10, 0, size=10)\n",
					"z2 = np.random.randint(10, size=10)\n",
					"\n",
					"ax.scatter(x1, y1, z1, c='b', marker='o', label='blue')\n",
					"ax.scatter(x2, y2, z2, c='g', marker='D', label='green')\n",
					"\n",
					"ax.set_xlabel('x axis')\n",
					"ax.set_ylabel('y axis')\n",
					"ax.set_zlabel('z axis')\n",
					"plt.title(\"3D Scatter Plot Example\")\n",
					"plt.legend()\n",
					"plt.tight_layout()\n",
					"plt.show()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"# 3D Bar Plots\n",
					"\n",
					"import matplotlib.pyplot as plt\n",
					"import numpy as np\n",
					"\n",
					"fig = plt.figure()\n",
					"ax = fig.add_subplot(111, projection = '3d')\n",
					"\n",
					"x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n",
					"y = np.random.randint(10, size=10)\n",
					"z = np.zeros(10)\n",
					"\n",
					"dx = np.ones(10)\n",
					"dy = np.ones(10)\n",
					"dz = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n",
					"\n",
					"ax.bar3d(x, y, z, dx, dy, dz, color='g')\n",
					"\n",
					"ax.set_xlabel('x axis')\n",
					"ax.set_ylabel('y axis')\n",
					"ax.set_zlabel('z axis')\n",
					"plt.title(\"3D Bar Chart Example\")\n",
					"plt.tight_layout()\n",
					"plt.show()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"# Wireframe Plots\n",
					"\n",
					"import matplotlib.pyplot as plt\n",
					"\n",
					"fig = plt.figure()\n",
					"ax = fig.add_subplot(111, projection = '3d')\n",
					"\n",
					"x, y, z = axes3d.get_test_data()\n",
					"\n",
					"ax.plot_wireframe(x, y, z, rstride = 2, cstride = 2)\n",
					"\n",
					"plt.title(\"Wireframe Plot Example\")\n",
					"plt.tight_layout()\n",
					"plt.show()"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Seaborn\n",
					"Seaborn is a library layered on top of Matplotlib that you can use."
				]
			},
			{
				"cell_type": "code",
				"source": [
					"# Scatterplot with a nice regression line fit to it, all with just one call to Seaborn's regplot.\n",
					"\n",
					"import matplotlib.pyplot as plt\n",
					"import numpy as np\n",
					"import seaborn as sns\n",
					"\n",
					"# Generate some random data\n",
					"num_points = 20\n",
					"# x will be 5, 6, 7... but also twiddled randomly\n",
					"x = 5 + np.arange(num_points) + np.random.randn(num_points)\n",
					"# y will be 10, 11, 12... but twiddled even more randomly\n",
					"y = 10 + np.arange(num_points) + 5 * np.random.randn(num_points)\n",
					"sns.regplot(x, y)\n",
					"plt.show()"
				],
				"execution_count": 63
			},
			{
				"cell_type": "code",
				"source": [
					"# Seanborn heatmap\n",
					"\n",
					"import matplotlib.pyplot as plt\n",
					"import numpy as np\n",
					"\n",
					"# Make a 10 x 10 heatmap of some random data\n",
					"side_length = 10\n",
					"# Start with a 10 x 10 matrix with values randomized around 5\n",
					"data = 5 + np.random.randn(side_length, side_length)\n",
					"# The next two lines make the values larger as we get closer to (9, 9)\n",
					"data += np.arange(side_length)\n",
					"data += np.reshape(np.arange(side_length), (side_length, 1))\n",
					"# Generate the heatmap\n",
					"sns.heatmap(data)\n",
					"plt.show()"
				],
				"execution_count": 64
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Bokeh\n",
					"You can render HTML or interactive libraries, like **bokeh**, using the **displayHTML()**.\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"import numpy as np\n",
					"from bokeh.plotting import figure, show\n",
					"from bokeh.io import output_notebook\n",
					"from bokeh.embed import file_html\n",
					"from bokeh.resources import CDN\n",
					"\n",
					"N = 4000\n",
					"x = np.random.random(size=N) * 100\n",
					"y = np.random.random(size=N) * 100\n",
					"radii = np.random.random(size=N) * 1.5\n",
					"colors = [\"#%02x%02x%02x\" % (r, g, 150) for r, g in zip(np.floor(50+2*x).astype(int), np.floor(30+2*y).astype(int))]\n",
					"\n",
					"p = figure()\n",
					"p.circle(x, y, radius=radii, fill_color=colors, fill_alpha=0.6, line_color=None)\n",
					"show(p)\n",
					"\n",
					"# create an html document that embeds the Bokeh plot\n",
					"html = file_html(p, CDN, \"my plot1\")\n",
					"\n",
					"# display this html\n",
					"displayHTML(html)"
				],
				"execution_count": 65
			},
			{
				"cell_type": "code",
				"source": [
					"# Plotting glyphs over a map using bokeh.\n",
					"\n",
					"from bokeh.plotting import figure, output_file\n",
					"from bokeh.tile_providers import get_provider, Vendors\n",
					"from bokeh.embed import file_html\n",
					"from bokeh.resources import CDN\n",
					"from bokeh.models import ColumnDataSource\n",
					"\n",
					"tile_provider = get_provider(Vendors.CARTODBPOSITRON)\n",
					"\n",
					"# range bounds supplied in web mercator coordinates\n",
					"p = figure(x_range=(-9000000,-8000000), y_range=(4000000,5000000),\n",
					"           x_axis_type=\"mercator\", y_axis_type=\"mercator\")\n",
					"p.add_tile(tile_provider)\n",
					"\n",
					"# plot datapoints on the map\n",
					"source = ColumnDataSource(\n",
					"    data=dict(x=[ -8800000, -8500000 , -8800000],\n",
					"              y=[4200000, 4500000, 4900000])\n",
					")\n",
					"\n",
					"p.circle(x=\"x\", y=\"y\", size=15, fill_color=\"blue\", fill_alpha=0.8, source=source)\n",
					"\n",
					"# create an html document that embeds the Bokeh plot\n",
					"html = file_html(p, CDN, \"my plot1\")\n",
					"\n",
					"# display this html\n",
					"displayHTML(html)"
				],
				"execution_count": 66
			},
			{
				"cell_type": "markdown",
				"source": [
					"# Predict NYC Taxi Tips using Spark ML and Azure Open Datasets\n",
					"\n",
					"The notebook ingests, visualizes, prepares and then trains a model based on an Open Dataset that tracks NYC Yellow Taxi trips and various attributes around them.\n",
					"The goal is to predict for a given trip whether there will be a trip or not.\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"import matplotlib.pyplot as plt\n",
					"\n",
					"from pyspark.sql.functions import unix_timestamp\n",
					"\n",
					"from pyspark.sql import SparkSession\n",
					"from pyspark.sql.types import *\n",
					"from pyspark.sql.functions import *\n",
					"\n",
					"from pyspark.ml import Pipeline\n",
					"from pyspark.ml import PipelineModel\n",
					"from pyspark.ml.feature import RFormula\n",
					"from pyspark.ml.feature import OneHotEncoder, StringIndexer, VectorIndexer\n",
					"from pyspark.ml.classification import LogisticRegression\n",
					"from pyspark.mllib.evaluation import BinaryClassificationMetrics\n",
					"from pyspark.ml.evaluation import BinaryClassificationEvaluator"
				],
				"execution_count": 67
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Ingest DataÂ¶ \n",
					"\n",
					"Get a sample data of nyc yellow taxi to make it faster/easier to evaluate different approaches to prep for the modelling phase later in the notebook."
				]
			},
			{
				"cell_type": "code",
				"source": [
					"# Import NYC yellow cab data from Azure Open Datasets\n",
					"from azureml.opendatasets import NycTlcYellow\n",
					"\n",
					"from datetime import datetime\n",
					"from dateutil import parser\n",
					"\n",
					"end_date = parser.parse('2018-05-08 00:00:00')\n",
					"start_date = parser.parse('2018-05-01 00:00:00')\n",
					"\n",
					"nyc_tlc = NycTlcYellow(start_date=start_date, end_date=end_date)\n",
					"nyc_tlc_df = nyc_tlc.to_spark_dataframe()"
				],
				"execution_count": 68
			},
			{
				"cell_type": "code",
				"source": [
					"#To make development easier, faster and less expensive downsample for now\n",
					"sampled_taxi_df = nyc_tlc_df.sample(True, 0.001, seed=1234)"
				],
				"execution_count": 69
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Exploratory Data Analysis\n",
					"\n",
					"Look at the data and evaluate its suitability for use in a model, do this via some basic charts focussed on tip values and relationships."
				]
			},
			{
				"cell_type": "code",
				"source": [
					"#The charting package needs a Pandas dataframe or numpy array do the conversion\n",
					"sampled_taxi_pd_df = sampled_taxi_df.toPandas()\n",
					"\n",
					"# Look at tips by amount count histogram\n",
					"ax1 = sampled_taxi_pd_df['tipAmount'].plot(kind='hist', bins=25, facecolor='lightblue')\n",
					"ax1.set_title('Tip amount distribution')\n",
					"ax1.set_xlabel('Tip Amount ($)')\n",
					"ax1.set_ylabel('Counts')\n",
					"plt.suptitle('')\n",
					"plt.show()\n",
					"\n",
					"# How many passengers tip'd by various amounts\n",
					"ax2 = sampled_taxi_pd_df.boxplot(column=['tipAmount'], by=['passengerCount'])\n",
					"ax2.set_title('Tip amount by Passenger count')\n",
					"ax2.set_xlabel('Passenger count') \n",
					"ax2.set_ylabel('Tip Amount ($)')\n",
					"plt.suptitle('')\n",
					"plt.show()\n",
					"\n",
					"# Look at the relationship between fare and tip amounts\n",
					"ax = sampled_taxi_pd_df.plot(kind='scatter', x= 'fareAmount', y = 'tipAmount', c='blue', alpha = 0.10, s=2.5*(sampled_taxi_pd_df['passengerCount']))\n",
					"ax.set_title('Tip amount by Fare amount')\n",
					"ax.set_xlabel('Fare Amount ($)')\n",
					"ax.set_ylabel('Tip Amount ($)')\n",
					"plt.axis([-2, 80, -2, 20])\n",
					"plt.suptitle('')\n",
					"plt.show()"
				],
				"execution_count": 70
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Data Prep and Featurization\n",
					"\n",
					"It's clear from the visualizations above that there are a bunch of outliers in the data. These will need to be filtered out in addition there are extra variables that are not going to be useful in the model we build at the end.\n",
					"\n",
					"Finally there is a need to create some new (derived) variables that will work better with the model.\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"taxi_df = sampled_taxi_df.select('totalAmount', 'fareAmount', 'tipAmount', 'paymentType', 'rateCodeId', 'passengerCount'\\\n",
					"                                , 'tripDistance', 'tpepPickupDateTime', 'tpepDropoffDateTime'\\\n",
					"                                , date_format('tpepPickupDateTime', 'hh').alias('pickupHour')\\\n",
					"                                , date_format('tpepPickupDateTime', 'EEEE').alias('weekdayString')\\\n",
					"                                , (unix_timestamp(col('tpepDropoffDateTime')) - unix_timestamp(col('tpepPickupDateTime'))).alias('tripTimeSecs')\\\n",
					"                                , (when(col('tipAmount') > 0, 1).otherwise(0)).alias('tipped')\n",
					"                                )\\\n",
					"                        .filter((sampled_taxi_df.passengerCount > 0) & (sampled_taxi_df.passengerCount < 8)\\\n",
					"                                & (sampled_taxi_df.tipAmount >= 0) & (sampled_taxi_df.tipAmount <= 25)\\\n",
					"                                & (sampled_taxi_df.fareAmount >= 1) & (sampled_taxi_df.fareAmount <= 250)\\\n",
					"                                & (sampled_taxi_df.tipAmount < sampled_taxi_df.fareAmount)\\\n",
					"                                & (sampled_taxi_df.tripDistance > 0) & (sampled_taxi_df.tripDistance <= 100)\\\n",
					"                                & (sampled_taxi_df.rateCodeId <= 5)\n",
					"                                & (sampled_taxi_df.paymentType.isin({\"1\", \"2\"}))\n",
					"                                )"
				],
				"execution_count": 71
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Data Prep and Featurization Part 2\n",
					"\n",
					"Having created new variables its now possible to drop the columns they were derived from so that the dataframe that goes into the model is the smallest in terms of number of variables, that is required.\n",
					"\n",
					"Also create some more features based on new columns from the first round.\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"taxi_featurised_df = taxi_df.select('totalAmount', 'fareAmount', 'tipAmount', 'paymentType', 'passengerCount'\\\n",
					"                                                , 'tripDistance', 'weekdayString', 'pickupHour','tripTimeSecs','tipped'\\\n",
					"                                                , when((taxi_df.pickupHour <= 6) | (taxi_df.pickupHour >= 20),\"Night\")\\\n",
					"                                                .when((taxi_df.pickupHour >= 7) & (taxi_df.pickupHour <= 10), \"AMRush\")\\\n",
					"                                                .when((taxi_df.pickupHour >= 11) & (taxi_df.pickupHour <= 15), \"Afternoon\")\\\n",
					"                                                .when((taxi_df.pickupHour >= 16) & (taxi_df.pickupHour <= 19), \"PMRush\")\\\n",
					"                                                .otherwise(0).alias('trafficTimeBins')\n",
					"                                              )\\\n",
					"                                       .filter((taxi_df.tripTimeSecs >= 30) & (taxi_df.tripTimeSecs <= 7200))"
				],
				"execution_count": 72
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Encoding\n",
					"\n",
					"Different ML algorithms support different types of input, for this example Logistic Regression is being used for Binary Classification. This means that any Categorical (string) variables must be converted to numbers.\n",
					"\n",
					"The process is not as simple as a \"map\" style function as the relationship between the numbers can introduce a bias in the resulting model, the approach is to index the variable and then encode using a std approach called One Hot Encoding.\n",
					"\n",
					"This approach requires the encoder to \"learn\"/fit a model over the data in the Spark instance and then transform based on what was learnt.\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"# The sample uses an algorithm that only works with numeric features convert them so they can be consumed\n",
					"sI1 = StringIndexer(inputCol=\"trafficTimeBins\", outputCol=\"trafficTimeBinsIndex\"); \n",
					"en1 = OneHotEncoder(dropLast=False, inputCol=\"trafficTimeBinsIndex\", outputCol=\"trafficTimeBinsVec\");\n",
					"sI2 = StringIndexer(inputCol=\"weekdayString\", outputCol=\"weekdayIndex\"); \n",
					"en2 = OneHotEncoder(dropLast=False, inputCol=\"weekdayIndex\", outputCol=\"weekdayVec\");\n",
					"\n",
					"# Create a new dataframe that has had the encodings applied\n",
					"encoded_final_df = Pipeline(stages=[sI1, en1, sI2, en2]).fit(taxi_featurised_df).transform(taxi_featurised_df)"
				],
				"execution_count": 73
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Generation of Testing and Training Data Sets\n",
					"Simple split, 70% for training and 30% for testing the model. Playing with this ratio may result in different models.\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"# Decide on the split between training and testing data from the dataframe \n",
					"trainingFraction = 0.7\n",
					"testingFraction = (1-trainingFraction)\n",
					"seed = 1234\n",
					"\n",
					"# Split the dataframe into test and training dataframes\n",
					"train_data_df, test_data_df = encoded_final_df.randomSplit([trainingFraction, testingFraction], seed=seed)"
				],
				"execution_count": 74
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Train the Model\n",
					"\n",
					"Train the Logistic Regression model and then evaluate it using Area under ROC as the metric."
				]
			},
			{
				"cell_type": "code",
				"source": [
					"## Create a new LR object for the model\n",
					"logReg = LogisticRegression(maxIter=10, regParam=0.3, labelCol = 'tipped')\n",
					"\n",
					"## The formula for the model\n",
					"classFormula = RFormula(formula=\"tipped ~ pickupHour + weekdayVec + passengerCount + tripTimeSecs + tripDistance + fareAmount + paymentType+ trafficTimeBinsVec\")\n",
					"\n",
					"## Undertake training and create an LR model\n",
					"lrModel = Pipeline(stages=[classFormula, logReg]).fit(train_data_df)\n",
					"\n",
					"## Saving the model is optional but its another for of inter session cache\n",
					"datestamp = datetime.now().strftime('%m-%d-%Y-%s');\n",
					"fileName = \"lrModel_\" + datestamp;\n",
					"logRegDirfilename = fileName;\n",
					"lrModel.save(logRegDirfilename)\n",
					"\n",
					"## Predict tip 1/0 (yes/no) on the test dataset, evaluation using AUROC\n",
					"predictions = lrModel.transform(test_data_df)\n",
					"predictionAndLabels = predictions.select(\"label\",\"prediction\").rdd\n",
					"metrics = BinaryClassificationMetrics(predictionAndLabels)\n",
					"print(\"Area under ROC = %s\" % metrics.areaUnderROC)"
				],
				"execution_count": 75
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Evaluate and Visualize\n",
					"\n",
					"Plot the actual curve to develop a better understanding of the model.\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"## Plot the ROC curve, no need for pandas as this uses the modelSummary object\n",
					"modelSummary = lrModel.stages[-1].summary\n",
					"\n",
					"plt.plot([0, 1], [0, 1], 'r--')\n",
					"plt.plot(modelSummary.roc.select('FPR').collect(),\n",
					"         modelSummary.roc.select('TPR').collect())\n",
					"plt.xlabel('False Positive Rate')\n",
					"plt.ylabel('True Positive Rate')\n",
					"plt.show()"
				],
				"execution_count": 76
			},
			{
				"cell_type": "markdown",
				"source": [
					"# Creating an unmanaged (external) Spark table\n",
					"This notebook describes how to create an unmanaged (also known as external) table from Spark. \n",
					"The table is created in /datalake/cities which may exist already (so you can attach to existing data) it can be created when you insert data."
				]
			},
			{
				"cell_type": "code",
				"source": [
					"spark.sql(\"CREATE TABLE cities (name STRING, population INT) USING PARQUET  LOCATION \\'/datalake/cities\\' OPTIONS (\\'compression\\'=\\'snappy\\')\")"
				],
				"execution_count": 77
			},
			{
				"cell_type": "markdown",
				"source": [
					"Insert a few rows into the table using a list of values.\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"spark.sql(\"INSERT INTO cities VALUES (\\'Seattle\\', 730400), (\\'San Francisco\\', 881549), (\\'Beijing\\', 21540000), (\\'Bangalore\\', 10540000)\")"
				],
				"execution_count": 78
			},
			{
				"cell_type": "markdown",
				"source": [
					"* Retrieve values back. Click on 'Chart' below to review the visualization.\n",
					""
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"diagram": {
						"activateDiagramType": 1,
						"chartConfig": {
							"category": "bar",
							"keys": [
								"name"
							],
							"values": [
								"population"
							],
							"yLabel": "population",
							"xLabel": "name",
							"aggregation": "SUM",
							"aggByBackend": false
						},
						"aggData": "{\"population\":{\"Bangalore\":263500000,\"Beijing\":538500000,\"San Francisco\":22038725,\"Seattle\":18260000}}",
						"isSummary": false,
						"previewData": {
							"filter": null
						},
						"isSql": false
					}
				},
				"source": [
					"display(spark.sql(\"SELECT * FROM cities ORDER BY name\"))"
				],
				"execution_count": 79
			},
			{
				"cell_type": "markdown",
				"source": [
					"Drop the table. Please note the data will remain in the data lake.\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"spark.sql(\"DROP TABLE cities\")"
				],
				"execution_count": 80
			},
			{
				"cell_type": "markdown",
				"source": [
					"# Creating a managed Spark table\n",
					"This notebook describes how to create a managed table from Spark. \n",
					"The table is created in the Synapse warehouse folder in your primary storage account. The table will be synchronized and available in Synapse SQL Pools. \n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"spark.sql(\"CREATE TABLE cities  (name STRING, population INT) USING PARQUET\")\n",
					""
				],
				"execution_count": 81
			},
			{
				"cell_type": "markdown",
				"source": [
					"Insert a few rows into the table using a list of values.\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"spark.sql(\"INSERT INTO cities VALUES (\\'Seattle\\', 730400), (\\'San Francisco\\', 881549), (\\'Beijing\\', 21540000), (\\'Bangalore\\', 10540000)\")"
				],
				"execution_count": 82
			},
			{
				"cell_type": "markdown",
				"source": [
					"* Retrieve values back. Click on 'Chart' below to review the visualization.\n",
					""
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"diagram": {
						"activateDiagramType": 1,
						"chartConfig": {
							"category": "bar",
							"keys": [
								"name"
							],
							"values": [
								"population"
							],
							"yLabel": "population",
							"xLabel": "name",
							"aggregation": "SUM",
							"aggByBackend": false
						},
						"aggData": "{\"population\":{\"Bangalore\":10540000,\"Beijing\":21540000,\"San Francisco\":881549,\"Seattle\":730400}}",
						"isSummary": false,
						"previewData": {
							"filter": null
						},
						"isSql": false
					}
				},
				"source": [
					"display(spark.sql(\"SELECT * FROM cities ORDER BY name\"))"
				],
				"execution_count": 83
			},
			{
				"cell_type": "markdown",
				"source": [
					"Drop the table. Please note the data will get deleted from the primary storage account associated with this workspace.\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"spark.sql(\"DROP TABLE cities\")"
				],
				"execution_count": 84
			},
			{
				"cell_type": "markdown",
				"source": [
					"# Hitchhiker's Guide to Delta Lake (Python)\n",
					"\n",
					"This tutorial has been adapted for more clarity from its original counterpart [here](https://docs.delta.io/latest/quick-start.html). This notebook helps you quickly explore the main features of [Delta Lake](https://github.com/delta-io/delta). It provides code snippets that show how to read from and write to Delta Lake tables from interactive, batch, and streaming queries.\n",
					"\n",
					"Here's what we will cover:\n",
					"* Create a table\n",
					"* Understanding meta-data\n",
					"* Read data\n",
					"* Update table data\n",
					"* Overwrite table data\n",
					"* Conditional update without overwrite\n",
					"* Read older versions of data using Time Travel\n",
					"* Write a stream of data to a table\n",
					"* Read a stream of changes from a table"
				]
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Configuration\n",
					"Make sure you modify this as appropriate."
				]
			},
			{
				"cell_type": "code",
				"source": [
					"import random\n",
					"\n",
					"session_id = random.randint(0,1000000)\n",
					"delta_table_path = \"/delta/delta-table-{0}\".format(session_id)\n",
					"\n",
					"delta_table_path"
				],
				"execution_count": 85
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Create a table\n",
					"To create a Delta Lake table, write a DataFrame out in the **delta** format. You can use existing Spark SQL code and change the format from parquet, csv, json, and so on, to delta.\n",
					"\n",
					"These operations create a new Delta Lake table using the schema that was inferred from your DataFrame. For the full set of options available when you create a new Delta Lake table, see Create a table and Write to a table (subsequent cells in this notebook)."
				]
			},
			{
				"cell_type": "code",
				"source": [
					"data = spark.range(0,5)\n",
					"data.show()\n",
					"data.write.format(\"delta\").save(delta_table_path)"
				],
				"execution_count": 86
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Understanding Meta-data\n",
					"\n",
					"In Delta Lake, meta-data is no different from data i.e., it is stored next to the data. Therefore, an interesting side-effect here is that you can peek into meta-data using regular Spark APIs. "
				]
			},
			{
				"cell_type": "code",
				"source": [
					"[log_line.value for log_line in spark.read.text(delta_table_path + \"/_delta_log/\").collect()]"
				],
				"execution_count": 87
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Read data\n",
					"\n",
					"You read data in your Delta Lake table by specifying the path to the files."
				]
			},
			{
				"cell_type": "code",
				"source": [
					"df = spark.read.format(\"delta\").load(delta_table_path)\n",
					"df.show()"
				],
				"execution_count": 88
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Update table data\n",
					"\n",
					"Delta Lake supports several operations to modify tables using standard DataFrame APIs. This example runs a batch job to overwrite the data in the table.\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"data = spark.range(5,10)\n",
					"data.write.format(\"delta\").mode(\"overwrite\").save(delta_table_path)\n",
					"df.show()"
				],
				"execution_count": 89
			},
			{
				"cell_type": "markdown",
				"source": [
					"When you now inspect the meta-data, what you will notice is that the original data is over-written. Well, not in a true sense but appropriate entries are added to Delta's transaction log so it can provide an \"illusion\" that the original data was deleted. We can verify this by re-inspecting the meta-data. You will see several entries indicating reference removal to the original data."
				]
			},
			{
				"cell_type": "code",
				"source": [
					"[log_line.value for log_line in spark.read.text(delta_table_path + \"/_delta_log/\").collect()]"
				],
				"execution_count": 90
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Save as catalog tables\n",
					"\n",
					"Delta Lake can write to managed or external catalog tables."
				]
			},
			{
				"cell_type": "code",
				"source": [
					"# Write data to a new managed catalog table.\n",
					"data.write.format(\"delta\").saveAsTable(\"ManagedDeltaTable\")"
				],
				"execution_count": 91
			},
			{
				"cell_type": "code",
				"source": [
					"# Define an external catalog table that points to the existing Delta Lake data in storage.\n",
					"spark.sql(\"CREATE TABLE ExternalDeltaTable USING DELTA LOCATION '{0}'\".format(delta_table_path))"
				],
				"execution_count": 92
			},
			{
				"cell_type": "code",
				"source": [
					"# List the 2 new tables.\n",
					"spark.sql(\"SHOW TABLES\").show()\n",
					"\n",
					"# Explore their properties.\n",
					"spark.sql(\"DESCRIBE EXTENDED ManagedDeltaTable\").show(truncate=False)\n",
					"spark.sql(\"DESCRIBE EXTENDED ExternalDeltaTable\").show(truncate=False)"
				],
				"execution_count": 93
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Conditional update without overwrite\n",
					"\n",
					"Delta Lake provides programmatic APIs to conditional update, delete, and merge (upsert) data into tables. For more information on these operations, see [Table Deletes, Updates, and Merges](https://docs.delta.io/latest/delta-update.html)."
				]
			},
			{
				"cell_type": "code",
				"source": [
					"from delta.tables import *\n",
					"from pyspark.sql.functions import *\n",
					"\n",
					"delta_table = DeltaTable.forPath(spark, delta_table_path)"
				],
				"execution_count": 94
			},
			{
				"cell_type": "code",
				"source": [
					"# Update every even value by adding 100 to it\n",
					"delta_table.update(\n",
					"  condition = expr(\"id % 2 == 0\"),\n",
					"  set = { \"id\": expr(\"id + 100\") })\n",
					"delta_table.toDF().show()"
				],
				"execution_count": 95
			},
			{
				"cell_type": "code",
				"source": [
					"# Delete every even value\n",
					"delta_table.delete(\"id % 2 == 0\")\n",
					"delta_table.toDF().show()"
				],
				"execution_count": 96
			},
			{
				"cell_type": "code",
				"source": [
					"# Upsert (merge) new data\n",
					"new_data = spark.range(0,20).alias(\"newData\")\n",
					"\n",
					"delta_table.alias(\"oldData\")\\\n",
					"    .merge(new_data.alias(\"newData\"), \"oldData.id = newData.id\")\\\n",
					"    .whenMatchedUpdate(set = { \"id\": lit(\"-1\")})\\\n",
					"    .whenNotMatchedInsert(values = { \"id\": col(\"newData.id\") })\\\n",
					"    .execute()\n",
					"\n",
					"delta_table.toDF().show(100)"
				],
				"execution_count": 97
			},
			{
				"cell_type": "markdown",
				"source": [
					"## History\n",
					"Delta's most powerful feature is the ability to allow looking into history i.e., the changes that were made to the underlying Delta Table. The cell below shows how simple it is to inspect the history."
				]
			},
			{
				"cell_type": "code",
				"source": [
					"delta_table.history().show(20, 1000, False)"
				],
				"execution_count": 98
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Read older versions of data using Time Travel\n",
					"\n",
					"You can query previous snapshots of your Delta Lake table by using a feature called Time Travel. If you want to access the data that you overwrote, you can query a snapshot of the table before you overwrote the first set of data using the versionAsOf option.\n",
					"\n",
					"Once you run the cell below, you should see the first set of data, from before you overwrote it. Time Travel is an extremely powerful feature that takes advantage of the power of the Delta Lake transaction log to access data that is no longer in the table. Removing the version 0 option (or specifying version 1) would let you see the newer data again. For more information, see [Query an older snapshot of a table (time travel)](https://docs.delta.io/latest/delta-batch.html#deltatimetravel)."
				]
			},
			{
				"cell_type": "code",
				"source": [
					"df = spark.read.format(\"delta\").option(\"versionAsOf\", 0).load(delta_table_path)\n",
					"df.show()"
				],
				"execution_count": 99
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Write a stream of data to a table\n",
					"\n",
					"You can also write to a Delta Lake table using Spark's Structured Streaming. The Delta Lake transaction log guarantees exactly-once processing, even when there are other streams or batch queries running concurrently against the table. By default, streams run in append mode, which adds new records to the table.\n",
					"\n",
					"For more information about Delta Lake integration with Structured Streaming, see [Table Streaming Reads and Writes](https://docs.delta.io/latest/delta-streaming.html).\n",
					"\n",
					"In the cells below, here's what we are doing:\n",
					"\n",
					"1. *Cell 28* Setup a simple Spark Structured Streaming job to generate a sequence and make the job write into our Delta Table\n",
					"2. *Cell 30* Show the newly appended data\n",
					"3. *Cell 31* Inspect history\n",
					"4. *Cell 32* Stop the structured streaming job\n",
					"5. *Cell 33* Inspect history <-- You'll notice appends have stopped"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"streaming_df = spark.readStream.format(\"rate\").load()\n",
					"stream = streaming_df\\\n",
					"    .selectExpr(\"value as id\")\\\n",
					"    .writeStream\\\n",
					"    .format(\"delta\")\\\n",
					"    .option(\"checkpointLocation\", \"/tmp/checkpoint-{0}\".format(session_id))\\\n",
					"    .start(delta_table_path)"
				],
				"execution_count": 100
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Read a stream of changes from a table\n",
					"\n",
					"While the stream is writing to the Delta Lake table, you can also read from that table as streaming source. For example, you can start another streaming query that prints all the changes made to the Delta Lake table."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"outputCollapsed": true
				},
				"source": [
					"delta_table.toDF().sort(col(\"id\").desc()).show(100)"
				],
				"execution_count": 101
			},
			{
				"cell_type": "code",
				"source": [
					"delta_table.history().drop(\"userId\", \"userName\", \"job\", \"notebook\", \"clusterId\", \"isolationLevel\", \"isBlindAppend\").show(20, 1000, False)"
				],
				"execution_count": 102
			},
			{
				"cell_type": "code",
				"source": [
					"stream.stop()"
				],
				"execution_count": 103
			},
			{
				"cell_type": "code",
				"source": [
					"delta_table.history().drop(\"userId\", \"userName\", \"job\", \"notebook\", \"clusterId\", \"isolationLevel\", \"isBlindAppend\").show(100, 1000, False)"
				],
				"execution_count": 104
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Compaction\n",
					"\n",
					"If a Delta Table is growing too large, you can compact it by repartitioning into a smaller number of files.\n",
					"\n",
					"The option `dataChange = false` is an optimization that tells Delta Lake to do the repartition without marking the underlying data as \"modified\". This ensures that any other concurrent operations (such as streaming reads/writes) aren't negatively impacted.\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"partition_count = 2\n",
					"\n",
					"spark.read\\\n",
					"    .format(\"delta\")\\\n",
					"    .load(delta_table_path)\\\n",
					"    .repartition(partition_count)\\\n",
					"    .write.option(\"dataChange\", \"false\")\\\n",
					"    .format(\"delta\")\\\n",
					"    .mode(\"overwrite\")\\\n",
					"    .save(delta_table_path)    "
				],
				"execution_count": 105
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Convert Parquet to Delta\n",
					"You can do an in-place conversion from the Parquet format to Delta."
				]
			},
			{
				"cell_type": "code",
				"source": [
					"parquet_path = \"/parquet/parquet-table-{0}\".format(session_id)\n",
					"\n",
					"data = spark.range(0,5)\n",
					"data.write.parquet(parquet_path)\n",
					"\n",
					"# Confirm that the data isn't in the Delta format\n",
					"DeltaTable.isDeltaTable(spark, parquet_path)"
				],
				"execution_count": 106
			},
			{
				"cell_type": "code",
				"source": [
					"DeltaTable.convertToDelta(spark, \"parquet.`{0}`\".format(parquet_path))\n",
					"\n",
					"# Confirm that the converted data is now in the Delta format\n",
					"DeltaTable.isDeltaTable(spark, parquet_path)"
				],
				"execution_count": 107
			},
			{
				"cell_type": "markdown",
				"source": [
					"## SQL Support\n",
					"Delta supports table utility commands through SQL.  You can use SQL to:\n",
					"* Get a DeltaTable's history\n",
					"* Vacuum a DeltaTable\n",
					"* Convert a Parquet file to Delta\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"spark.sql(\"DESCRIBE HISTORY delta.`{0}`\".format(delta_table_path)).show()"
				],
				"execution_count": 108
			},
			{
				"cell_type": "code",
				"source": [
					"spark.sql(\"VACUUM delta.`{0}`\".format(delta_table_path)).show()"
				],
				"execution_count": 109
			},
			{
				"cell_type": "code",
				"source": [
					"parquet_id = random.randint(0,1000)\n",
					"parquet_path = \"/parquet/parquet-table-{0}-{1}\".format(session_id, parquet_path)\n",
					"\n",
					"data = spark.range(0,5)\n",
					"data.write.parquet(parquet_path)\n",
					"\n",
					"# Confirm that the data isn't in the Delta format\n",
					"DeltaTable.isDeltaTable(spark, parquet_path)\n",
					"\n",
					"# Use SQL to convert the parquet table to Delta\n",
					"spark.sql(\"CONVERT TO DELTA parquet.`{0}`\".format(parquet_path))\n",
					"\n",
					"DeltaTable.isDeltaTable(spark, parquet_path)"
				],
				"execution_count": 110
			},
			{
				"cell_type": "markdown",
				"source": [
					"#  Updates and GDPR using Delta Lake - PySpark\n",
					"\n",
					"In this notebook, we will review Delta Lake's end-to-end capabilities in PySpark. You can also look at the original Quick Start guide if you are not familiar with [Delta Lake](https://github.com/delta-io/delta) [here](https://docs.delta.io/latest/quick-start.html). It provides code snippets that show how to read from and write to Delta Lake tables from interactive, batch, and streaming queries.\n",
					"\n",
					"In this notebook, we will cover the following:\n",
					"\n",
					"- Creating sample mock data containing customer orders\n",
					"- Writing this data into storage in Delta Lake table format (or in short, Delta table)\n",
					"- Querying the Delta table using functional and SQL\n",
					"- The Curious Case of Forgotten Discount - Making corrections to data\n",
					"- Enforcing GDPR on your data\n",
					"- Oops, enforced it on the wrong customer! - Looking at the audit log to find mistakes in operations\n",
					"- Rollback all the way!\n",
					"- Closing the loop - 'defrag' your data"
				]
			},
			{
				"cell_type": "markdown",
				"source": [
					"# Creating sample mock data containing customer orders\n",
					"\n",
					"For this tutorial, we will setup a sample file containing customer orders with a simple schema: (order_id, order_date, customer_name, price)."
				]
			},
			{
				"cell_type": "code",
				"source": [
					"spark.sql(\"DROP TABLE IF EXISTS input\");\n",
					"spark.sql(\"\"\"\n",
					"          CREATE TEMPORARY VIEW input \n",
					"          AS SELECT 1 order_id, '2019-11-01' order_date, 'Saveen' customer_name, 100 price\n",
					"          UNION ALL SELECT 2, '2019-11-01', 'Terry', 50\n",
					"          UNION ALL SELECT 3, '2019-11-01', 'Priyanka', 100\n",
					"          UNION ALL SELECT 4, '2019-11-02', 'Steve', 10\n",
					"          UNION ALL SELECT 5, '2019-11-03', 'Rahul', 10\n",
					"          UNION ALL SELECT 6, '2019-11-03', 'Niharika', 75\n",
					"          UNION ALL SELECT 7, '2019-11-03', 'Elva', 90\n",
					"          UNION ALL SELECT 8, '2019-11-04', 'Andrew', 70\n",
					"          UNION ALL SELECT 9, '2019-11-05', 'Michael', 20\n",
					"          UNION ALL SELECT 10, '2019-11-05', 'Brigit', 25\"\"\")\n",
					"orders = spark.sql(\"SELECT * FROM input\")\n",
					"orders.show()\n",
					"orders.printSchema()"
				],
				"execution_count": 111
			},
			{
				"cell_type": "markdown",
				"source": [
					"# Writing this data into storage in Delta Lake table format (or in short, Delta table)\n",
					"\n",
					"To create a Delta Lake table, you can write a DataFrame out in the **delta** format. You can use existing Spark SQL code and change the format from parquet, csv, json, and so on, to delta. These operations create a new Delta Lake table using the schema that was inferred from your DataFrame. \n",
					"\n",
					"If you already have existing data in Parquet format, you can do an \"in-place\" conversion to Delta Lake format. The code would look like following:\n",
					"\n",
					"DeltaTable.convertToDelta(spark, $\"parquet.`{path_to_data}`\");\n",
					"\n",
					"//Confirm that the converted data is now in the Delta format\n",
					"DeltaTable.isDeltaTable(parquetPath)"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"import random\n",
					"\n",
					"session_id = random.randint(0,1000)\n",
					"path = \"/delta/delta-table-{0}\".format(session_id)\n",
					"path"
				],
				"execution_count": 112
			},
			{
				"cell_type": "code",
				"source": [
					"# Here's how you'd do this in Parquet: \n",
					"# orders.repartition(1).write().format(\"parquet\").save(path)\n",
					"\n",
					"orders.repartition(1).write.format(\"delta\").save(path)"
				],
				"execution_count": 113
			},
			{
				"cell_type": "markdown",
				"source": [
					"# Querying the Delta table using functional and SQL\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"ordersDataFrame = spark.read.format(\"delta\").load(path)\n",
					"ordersDataFrame.show()"
				],
				"execution_count": 114
			},
			{
				"cell_type": "code",
				"source": [
					"ordersDataFrame.createOrReplaceTempView(\"ordersDeltaTable\")\n",
					"spark.sql(\"SELECT * FROM ordersDeltaTable\").show"
				],
				"execution_count": 115
			},
			{
				"cell_type": "markdown",
				"source": [
					"# Understanding Meta-data\n",
					"\n",
					"In Delta Lake, meta-data is no different from data i.e., it is stored next to the data. Therefore, an interesting side-effect here is that you can peek into meta-data using regular Spark APIs. "
				]
			},
			{
				"cell_type": "code",
				"source": [
					"[log_line.value for log_line in spark.read.text(path + \"/_delta_log/\").collect()]"
				],
				"execution_count": 116
			},
			{
				"cell_type": "markdown",
				"source": [
					"# The Curious Case of Forgotten Discount - Making corrections to data\n",
					"\n",
					"Now that you are able to look at the orders table, you realize that you forgot to discount the orders that came in on November 1, 2019. Worry not! You can quickly make that correction."
				]
			},
			{
				"cell_type": "code",
				"source": [
					"from delta.tables import *\n",
					"from pyspark.sql.functions import *\n",
					"\n",
					"table = DeltaTable.forPath(spark, path)\n",
					"\n",
					"# Update every transaction that took place on November 1, 2019 and apply a discount of 10%\n",
					"table.update(\n",
					"  condition = expr(\"order_date == '2019-11-01'\"),\n",
					"  set = {\"price\": expr(\"price - price*0.1\") })"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"table.toDF()"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"When you now inspect the meta-data, what you will notice is that the original data is over-written. Well, not in a true sense but appropriate entries are added to Delta's transaction log so it can provide an \"illusion\" that the original data was deleted. We can verify this by re-inspecting the meta-data. You will see several entries indicating reference removal to the original data."
				]
			},
			{
				"cell_type": "code",
				"source": [
					"[log_line.value for log_line in spark.read.text(path + \"/_delta_log/\").collect()]"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"# Enforcing GDPR on your data\n",
					"\n",
					"One of your customers wanted their data to be deleted. But wait, you are working with data stored on an immutable file system (e.g., HDFS, ADLS, WASB). How would you delete it? Using Delta Lake's Delete API.\n",
					"\n",
					"Delta Lake provides programmatic APIs to conditionally update, delete, and merge (upsert) data into tables. For more information on these operations, see [Table Deletes, Updates, and Merges](https://docs.delta.io/latest/delta-update.html)."
				]
			},
			{
				"cell_type": "code",
				"source": [
					"# Delete the appropriate customer\n",
					"table.delete(condition = expr(\"customer_name == 'Saveen'\"))\n",
					"table.toDF().show()"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"# Oops, enforced it on the wrong customer! - Looking at the audit/history log to find mistakes in operations\n",
					"\n",
					"Delta's most powerful feature is the ability to allow looking into history i.e., the changes that were made to the underlying Delta Table. The cell below shows how simple it is to inspect the history.\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"table.history().drop(\"userId\", \"userName\", \"job\", \"notebook\", \"clusterId\", \"isolationLevel\", \"isBlindAppend\").show(20, 1000, False)"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"# Rollback all the way using Time Travel!\n",
					"\n",
					"You can query previous snapshots of your Delta Lake table by using a feature called Time Travel. If you want to access the data that you overwrote, you can query a snapshot of the table before you overwrote the first set of data using the versionAsOf option.\n",
					"\n",
					"Once you run the cell below, you should see the first set of data, from before you overwrote it. Time Travel is an extremely powerful feature that takes advantage of the power of the Delta Lake transaction log to access data that is no longer in the table. Removing the version 0 option (or specifying version 1) would let you see the newer data again. For more information, see [Query an older snapshot of a table (time travel)](https://docs.delta.io/latest/delta-batch.html#deltatimetravel)."
				]
			},
			{
				"cell_type": "code",
				"source": [
					"spark.read.format(\"delta\").option(\"versionAsOf\", \"1\").load(path).write.mode(\"overwrite\").format(\"delta\").save(path)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"# Delete the correct customer - REMOVE\n",
					"table.delete(condition = expr(\"customer_name == 'Rahul'\"))\n",
					"table.toDF().show()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"table.history().drop(\"userId\", \"userName\", \"job\", \"notebook\", \"clusterId\", \"isolationLevel\", \"isBlindAppend\").show(20, 1000, False)"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"# Closing the loop - 'defrag' your data\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"spark.conf.set(\"spark.databricks.delta.retentionDurationCheck.enabled\", \"false\")\n",
					"table.vacuum(0.01)\n",
					"\n",
					"# Alternate Syntax: spark.sql($\"VACUUM delta.`{path}`\").show"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"# Hitchhiker's Guide to Hyperspace (Python)\n",
					"## An Indexing Subsystem for Apache Sparkâ„¢\n",
					"\n",
					"<img src=\"https://raw.githubusercontent.com/rapoth/hyperspace/master/docs/assets/images/hyperspace-small-banner.png\" alt=\"Hyperspace Indexing Sub-System Logo\" width=\"1000\"/>\n",
					"\n",
					"[Hyperspace](https://github.com/microsoft/hyperspace) introduces the ability for Apache Sparkâ„¢ users to create indexes on their datasets (e.g., CSV, JSON, Parquet etc.) and leverage them for potential query and workload acceleration.\n",
					"\n",
					"In this notebook, we highlight the basics of Hyperspace, emphasizing on its simplicity and show how it can be used by just anyone.\n",
					"\n",
					"**Disclaimer**: Hyperspace helps accelerate your workloads/queries under two circumstances:\n",
					"\n",
					"  1. Queries contain filters on predicates with high selectivity (e.g., you want to select 100 matching rows from a million candidate rows)\n",
					"  2. Queries contain a join that requires heavy-shuffles (e.g., you want to join a 100 GB dataset with a 10 GB dataset)\n",
					"\n",
					"You may want to carefully monitor your workloads and determine whether indexing is helping you on a case-by-case basis."
				],
				"attachments": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Setup\n",
					"To begin with, let's start a new Sparkâ„¢ session. Since this notebook is a tutorial merely to illustrate what Hyperspace can offer, we will make a configuration change that allow us to highlight what Hyperspace is doing on small datasets. By default, Sparkâ„¢ uses *broadcast join* to optimize join queries when the data size for one side of join is small (which is the case for the sample data we use in this tutorial). Therefore, we disable broadcast joins so that later when we run join queries, Sparkâ„¢ uses *sort-merge* join. This is mainly to show how Hyperspace indexes would be used at scale for accelerating join queries.\n",
					"\n",
					"The output of running the cell below shows a reference to the successfully created Sparkâ„¢ session and prints out '-1' as the value for the modified join config which indicates that broadcast join is successfully disabled."
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"import random\n",
					"\n",
					"session_id = random.randint(0,1000000)\n",
					"data_path = \"/hyperspace/data-{0}\".format(session_id)\n",
					"index_location = \"/hyperspace/indexes-{0}\".format(session_id)\n",
					"\n",
					"# Please note that you DO NOT need to change this configuration in production.\n",
					"# We store all indexes in the system folder within Synapse.\n",
					"spark.conf.set(\"spark.hyperspace.system.path\", index_location)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"# Start your Spark session\n",
					"spark\n",
					"\n",
					"# Disable BroadcastHashJoin, so Spark will use standard SortMergeJoin. Currently Hyperspace indexes utilize SortMergeJoin to speed up query.\n",
					"spark.conf.set(\"spark.sql.autoBroadcastJoinThreshold\", -1)\n",
					"\n",
					"# Verify that BroadcastHashJoin is set correctly \n",
					"print(spark.conf.get(\"spark.sql.autoBroadcastJoinThreshold\"))\n",
					"spark.conf.set(\"spark.hyperspace.explain.displayMode\", \"html\")"
				],
				"attachments": null,
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Data Preparation\n",
					"\n",
					"To prepare our environment, we will create sample data records and save them as parquet data files. While we use Parquet for illustration, you can use other formats such as CSV. In the subsequent cells, we will also demonstrate how you can create several Hyperspace indexes on this sample dataset and how one can make Sparkâ„¢ use them when running queries. \n",
					"\n",
					"Our example records correspond to two datasets: *department* and *employee*. You should configure \"empLocation\" and \"deptLocation\" paths so that on the storage account they point to your desired location to save generated data files. \n",
					"\n",
					"The output of running below cell shows contents of our datasets as lists of triplets followed by references to dataFrames created to save the content of each dataset in our preferred location."
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql.types import StructField, StructType, StringType, IntegerType\n",
					"\n",
					"# Sample department records\n",
					"departments = [(10, \"Accounting\", \"New York\"), (20, \"Research\", \"Dallas\"), (30, \"Sales\", \"Chicago\"), (40, \"Operations\", \"Boston\")]\n",
					"\n",
					"# Sample employee records\n",
					"employees = [(7369, \"SMITH\", 20), (7499, \"ALLEN\", 30), (7521, \"WARD\", 30), (7566, \"JONES\", 20), (7698, \"BLAKE\", 30)]\n",
					"\n",
					"# Create a schema for the dataframe\n",
					"dept_schema = StructType([StructField('deptId', IntegerType(), True), StructField('deptName', StringType(), True), StructField('location', StringType(), True)])\n",
					"emp_schema = StructType([StructField('empId', IntegerType(), True), StructField('empName', StringType(), True), StructField('deptId', IntegerType(), True)])\n",
					"\n",
					"departments_df = spark.createDataFrame(departments, dept_schema)\n",
					"employees_df = spark.createDataFrame(employees, emp_schema)\n",
					"\n",
					"emp_Location = data_path + \"/employees.parquet\"\n",
					"dept_Location = data_path + \"/departments.parquet\"\n",
					"\n",
					"employees_df.write.mode(\"overwrite\").parquet(emp_Location)\n",
					"departments_df.write.mode(\"overwrite\").parquet(dept_Location)"
				],
				"attachments": null,
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"Let's verify the contents of parquet files we created above to make sure they contain expected records in correct format. We later use these data files to create Hyperspace indexes and run sample queries.\n",
					"\n",
					"Running below cell, the output displays the rows in employee and department dataframes in a tabular form. There should be 14 employees and 4 departments, each matching with one of triplets we created in the previous cell."
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"# emp_Location and dept_Location are the user defined locations above to save parquet files\n",
					"emp_DF = spark.read.parquet(emp_Location)\n",
					"dept_DF = spark.read.parquet(dept_Location)\n",
					"\n",
					"# Verify the data is available and correct\n",
					"emp_DF.show()\n",
					"dept_DF.show()"
				],
				"attachments": null,
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Hello Hyperspace Index!\n",
					"Hyperspace lets users create indexes on records scanned from persisted data files. Once successfully created, an entry corresponding to the index is added to the Hyperspace's metadata. This metadata is later used by Apache Sparkâ„¢'s Hyperspace-enabled optimizer during query processing to find and use proper indexes. \n",
					"\n",
					"Once indexes are created, users can perform several actions:\n",
					"  - **Refresh** If the underlying data changes, users can refresh an existing index to capture that. \n",
					"  - **Delete** If the index is not needed, users can perform a soft-delete i.e., index is not physically deleted but is marked as 'deleted' so it is no longer used in your workloads.\n",
					"  - **Vacuum** If an index is no longer required, users can vacuum it which forces a physical deletion of the index contents and associated metadata completely from Hyperspace's metadata.\n",
					"\n",
					"Below sections show how such index management operations can be done in Hyperspace.\n",
					"\n",
					"First, we need to import the required libraries and create an instance of Hyperspace. We later use this instance to invoke different Hyperspace APIs to create indexes on our sample data and modify those indexes.\n",
					"\n",
					"Output of running below cell shows a reference to the created instance of Hyperspace."
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"from hyperspace import *\n",
					"\n",
					"# Create an instance of Hyperspace\n",
					"hyperspace = Hyperspace(spark)"
				],
				"attachments": null,
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"### Create Indexes\n",
					"To create a Hyperspace index, the user needs to provide 2 pieces of information:\n",
					"* An Apache Sparkâ„¢ DataFrame which references the data to be indexed.\n",
					"* An index configuration object: IndexConfig, which specifies the *index name*, *indexed* and *included* columns of the index. \n",
					"\n",
					"As you might have noticed, in this notebook, we illustrate indexing using the [Covering Index](https://www.red-gate.com/simple-talk/sql/learn-sql-server/using-covering-indexes-to-improve-query-performance/), which are the default index in Hyperspace. In the future, we plan on adding support for other index types. \n",
					"\n",
					"We start by creating three Hyperspace indexes on our sample data: two indexes on the department dataset named \"deptIndex1\" and \"deptIndex2\", and one index on the employee dataset named 'empIndex'. \n",
					"For each index, we need a corresponding IndexConfig to capture the name along with columns lists for the indexed and included columns. Running below cell creates these indexConfigs and its output lists them.\n",
					"\n",
					"**Note**: An *index column* is a column that appears in your filters or join conditions. An *included column* is a column that appears in your select/project.\n",
					"\n",
					"For instance, in the following query:\n",
					"```sql\n",
					"SELECT X\n",
					"FROM Table\n",
					"WHERE Y = 2\n",
					"```\n",
					"X can be an *index column* and Y can be an *included column*."
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"# Create index configurations\n",
					"\n",
					"emp_IndexConfig = IndexConfig(\"empIndex1\", [\"deptId\"], [\"empName\"])\n",
					"dept_IndexConfig1 = IndexConfig(\"deptIndex1\", [\"deptId\"], [\"deptName\"])\n",
					"dept_IndexConfig2 = IndexConfig(\"deptIndex2\", [\"location\"], [\"deptName\"])"
				],
				"attachments": null,
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"Now, we create three indexes using our index configurations. For this purpose, we invoke \"createIndex\" command on our Hyperspace instance. This command requires an index configuration and the dataFrame containing rows to be indexed.\n",
					"Running below cell creates three indexes.\n",
					""
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"# Create indexes from configurations\n",
					"\n",
					"hyperspace.createIndex(emp_DF, emp_IndexConfig)\n",
					"hyperspace.createIndex(dept_DF, dept_IndexConfig1)\n",
					"hyperspace.createIndex(dept_DF, dept_IndexConfig2)"
				],
				"attachments": null,
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"### List Indexes\n",
					"\n",
					"Below code shows how a user can list all available indexes in a Hyperspace instance. It uses the `indexes` API which returns information about existing indexes as a Sparkâ„¢'s DataFrame so you can perform additional operations. For instance, you can invoke valid operations on this DataFrame for checking its content or analyzing it further (for example filtering specific indexes or grouping them according to some desired property). \n",
					"\n",
					"Below cell uses DataFrame's `show` action to fully print the rows and show details of our indexes in a tabular form. For each index, we can see all the information Hyperspace has stored about it in its metadata. \n",
					"\n",
					"You will immediately notice the following:\n",
					"  - `config.indexName`, `config.indexedColumns`, `config.includedColumns` are the fields that a user normally provides during index creation.\n",
					"  - `status.status` indicates if the index is being actively used by the Spark's optimizer.\n",
					"  - `dfSignature` is automatically generated by Hyperspace and is unique for each index. Hyperspace uses this signature internally to maintain the index and exploit it at query time. \n",
					"  \n",
					"In the output below, all three indexes should have \"ACTIVE\" as status and their name, indexed columns, and included columns should match with what we defined in index configurations above."
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"hyperspace.indexes().show()"
				],
				"attachments": null,
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"### Delete Indexes\n",
					"A user can drop an existing index by using the `deleteIndex` API and providing the index name. \n",
					"\n",
					"Index deletion is a **soft-delete** operation i.e., only the index's status in the Hyperspace metadata from is changed from \"ACTIVE\" to \"DELETED\". This will exclude the deleted index from any future query optimization and Hyperspace no longer picks that index for any query. However, index files for a deleted index still remain available (since it is a soft-delete), so if you accidentally deleted the index, you could still restore it.\n",
					"\n",
					"The cell below deletes index with name \"deptIndex2\" and lists Hyperspace metadata after that. The output should be similar to above cell for \"List Indexes\" except for \"deptIndex2\" which now should have its status changed into \"DELETED\"."
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"hyperspace.deleteIndex(\"deptIndex2\")\n",
					"\n",
					"hyperspace.indexes().show()"
				],
				"attachments": null,
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"### Restore Indexes\n",
					"A user can use the `restoreIndex` API to restore a deleted index. This will bring back the latest version of index into ACTIVE status and makes it usable again for queries. \n",
					"\n",
					"The cell below shows an example of `restoreIndex` API. We delete \"deptIndex1\" and restore it. The output shows \"deptIndex1\" first went into the \"DELETED\" status after invoking \"deleteIndex\" command and came back to the \"ACTIVE\" status after calling \"restoreIndex\"."
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"hyperspace.deleteIndex(\"deptIndex1\")\n",
					"\n",
					"hyperspace.indexes().show()\n",
					"\n",
					"hyperspace.restoreIndex(\"deptIndex1\")\n",
					"\n",
					"hyperspace.indexes().show()"
				],
				"attachments": null,
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"### Vacuum Indexes\n",
					"The user can perform a **hard-delete** i.e., fully remove files and the metadata entry for a deleted index using the `vacuumIndex` API. Once done, this action is **irreversible** as it physically deletes all the index files associated with the index.\n",
					"\n",
					"The cell below vacuums the \"deptIndex2\" index and shows Hyperspace metadata after vaccuming. You should see metadata entries for two indexes \"deptIndex1\" and \"empIndex\" both with \"ACTIVE\" status and no entry for \"deptIndex2\"."
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"hyperspace.vacuumIndex(\"deptIndex2\")\n",
					"hyperspace.indexes().show()"
				],
				"attachments": null,
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Enable/Disable Hyperspace\n",
					"\n",
					"Hyperspace provides APIs to enable or disable index usage with Sparkâ„¢.\n",
					"\n",
					"  - By using `enableHyperspace` API, Hyperspace optimization rules become visible to the Apache Sparkâ„¢ optimizer and it will exploit existing Hyperspace indexes to optimize user queries.\n",
					"  - By using `disableHyperspace` command, Hyperspace rules no longer apply during query optimization. You should note that disabling Hyperspace has no impact on created indexes as they remain intact.\n",
					"\n",
					"Below cell shows how you can use these commands to enable or disable hyperspace. The output simply shows a reference to the existing Sparkâ„¢ session whose configuration is updated."
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"# Enable Hyperspace\n",
					"Hyperspace.enable(spark)\n",
					"\n",
					"# Disable Hyperspace\n",
					"Hyperspace.disable(spark)"
				],
				"attachments": null,
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Index Usage\n",
					"In order to make Spark use Hyperspace indexes during query processing, the user needs to make sure that Hyperspace is enabled. \n",
					"\n",
					"The cell below enables Hyperspace and creates two DataFrames containing our sample data records which we use for running example queries. For each DataFrame, a few sample rows are printed."
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"# Enable Hyperspace\n",
					"Hyperspace.enable(spark)\n",
					"\n",
					"emp_DF = spark.read.parquet(emp_Location)\n",
					"dept_DF = spark.read.parquet(dept_Location)\n",
					"\n",
					"emp_DF.show(5)\n",
					"dept_DF.show(5)"
				],
				"attachments": null,
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"# Hyperspace's Index Types\n",
					"\n",
					"Currently, Hyperspace can exploit indexes for two groups of queries: \n",
					"* Selection queries with lookup or range selection filtering predicates.\n",
					"* Join queries with an equality join predicate (i.e. Equi-joins)."
				],
				"attachments": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Indexes for Accelerating Filters\n",
					"\n",
					"Our first example query does a lookup on department records (see below cell). In SQL, this query looks as follows:\n",
					"\n",
					"```sql\n",
					"SELECT deptName \n",
					"FROM departments\n",
					"WHERE deptId = 20\n",
					"```\n",
					"\n",
					"The output of running the cell below shows: \n",
					"- query result, which is a single department name.\n",
					"- query plan that Sparkâ„¢ used to run the query. \n",
					"\n",
					"In the query plan, the \"FileScan\" operator at the bottom of the plan shows the datasource where the records were read from. The location of this file indicates the path to the latest version of the \"deptIndex1\" index. This shows  that according to the query and using Hyperspace optimization rules, Sparkâ„¢ decided to exploit the proper index at runtime.\n",
					""
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"# Filter with equality predicate\n",
					"\n",
					"eqFilter = dept_DF.filter(\"\"\"deptId = 20\"\"\").select(\"\"\"deptName\"\"\")\n",
					"eqFilter.show()\n",
					"\n",
					"hyperspace.explain(eqFilter, True, displayHTML)"
				],
				"attachments": null,
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"Our second example is a range selection query on department records. In SQL, this query looks as follows:\n",
					"\n",
					"```sql\n",
					"SELECT deptName \n",
					"FROM departments\n",
					"WHERE deptId > 20\n",
					"```\n",
					"Similar to our first example, the output of the cell below shows the query results (names of two departments) and the query plan. The location of data file in the FileScan operator shows that 'deptIndex1\" was used to run the query.   \n",
					""
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"# Filter with range selection predicate\n",
					"\n",
					"rangeFilter = dept_DF.filter(\"\"\"deptId > 20\"\"\").select(\"deptName\")\n",
					"rangeFilter.show()\n",
					"\n",
					"hyperspace.explain(rangeFilter, True, displayHTML)"
				],
				"attachments": null,
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"Our third example is a query joining department and employee records on the department id. The equivalent SQL statement is shown below:\n",
					"\n",
					"```sql\n",
					"SELECT employees.deptId, empName, departments.deptId, deptName\n",
					"FROM   employees, departments \n",
					"WHERE  employees.deptId = departments.deptId\n",
					"```\n",
					"\n",
					"The output of running the cell below shows the query results which are the names of 14 employees and the name of department each employee works in. The query plan is also included in the output. Notice how the file locations for two FileScan operators shows that Spark used \"empIndex\" and \"deptIndex1\" indexes to run the query.   \n",
					""
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"# Join\n",
					"\n",
					"eqJoin = emp_DF.join(dept_DF, emp_DF.deptId == dept_DF.deptId).select(emp_DF.empName, dept_DF.deptName)\n",
					"\n",
					"eqJoin.show()\n",
					"\n",
					"hyperspace.explain(eqJoin, True, displayHTML)"
				],
				"attachments": null,
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Support for SQL Semantics\n",
					"\n",
					"The index usage is transparent to whether the user uses DataFrame API or Sparkâ„¢ SQL. The following example shows the same join example as before but using Spark SQL, showing the use of indexes if applicable."
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql import SparkSession\n",
					"\n",
					"emp_DF.createOrReplaceTempView(\"EMP\")\n",
					"dept_DF.createOrReplaceTempView(\"DEPT\")\n",
					"\n",
					"joinQuery = spark.sql(\"SELECT EMP.empName, DEPT.deptName FROM EMP, DEPT WHERE EMP.deptId = DEPT.deptId\")\n",
					"\n",
					"joinQuery.show()\n",
					"hyperspace.explain(joinQuery, True, displayHTML)"
				],
				"attachments": null,
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Explain API\n",
					"\n",
					"So far, you might have observed we have been using the explain API provided by Hyperspace. The `explain` API from Hyperspace is very similar to Spark's `df.explain` API but allows users to compare their original plan vs the updated index-dependent plan before running their query. You have an option to choose from html/plaintext/console mode to display the command output. \n",
					"\n",
					"The following cell shows an example with HTML. The highlighted section represents the difference between original and updated plans along with the indexes being used."
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"eqJoin = emp_DF.join(dept_DF, emp_DF.deptId == dept_DF.deptId).select(emp_DF.empName, dept_DF.deptName)\n",
					"\n",
					"spark.conf.set(\"spark.hyperspace.explain.displayMode\", \"html\")\n",
					"hyperspace.explain(eqJoin, True, displayHTML)"
				],
				"attachments": null,
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Refresh Indexes\n",
					"If the original data on which an index was created changes, then the index will no longer capture the latest state of data and hence will not be used by Hyperspace to provide any acceleration. The user can refresh such a stale index using the `refreshIndex` API. This causes the index to be fully rebuilt and updates it according to the latest data records.\n",
					"    \n",
					"    Spoiler alert: if you are worried about fully rebuilding your index every time your data changes, don't worry! We will show you how to *incrementally refresh* your index in subsequent cells below.\n",
					"\n",
					"The two cells below show an example for this scenario:\n",
					"- First cell adds two more departments to the original departments data. It reads and prints list of departments to verify new departments are added correctly. The output shows 6 departments in total: four old ones and two new. Invoking \"refreshIndex\" updates \"deptIndex1\" so index captures new departments.\n",
					"- Second cell runs our range selection query example. The results should now contain four departments: two are the ones, seen before when we ran the query above, and two are the new departments we just added."
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"extra_Departments = [(50, \"Inovation\", \"Seattle\"), (60, \"Human Resources\", \"San Francisco\")]\n",
					"\n",
					"extra_departments_df = spark.createDataFrame(extra_Departments, dept_schema)\n",
					"extra_departments_df.write.mode(\"Append\").parquet(dept_Location)\n",
					"\n",
					"\n",
					"dept_DFrame_Updated = spark.read.parquet(dept_Location)\n",
					"\n",
					"dept_DFrame_Updated.show(10)\n",
					"\n",
					"hyperspace.refreshIndex(\"deptIndex1\")"
				],
				"attachments": null,
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"newRangeFilter = dept_DFrame_Updated.filter(\"deptId > 20\").select(\"deptName\")\n",
					"newRangeFilter.show()\n",
					"\n",
					"hyperspace.explain(newRangeFilter, True, displayHTML)"
				],
				"attachments": null,
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"hyperspace.indexes().show()"
				],
				"attachments": null,
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"# Clean-up the remaining indexes\n",
					"hyperspace.deleteIndex(\"empIndex1\")\n",
					"hyperspace.deleteIndex(\"deptIndex1\")\n",
					"\n",
					"hyperspace.vacuumIndex(\"empIndex1\")\n",
					"hyperspace.vacuumIndex(\"deptIndex1\")"
				],
				"attachments": null,
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Hybrid Scan for Mutable Datasets\n",
					"\n",
					"Often times, if your underlying source data had some new files appended or existing files deleted, your index will get stale and Hyperspace decides not to use it. However, there are times where you just want to use the index without having to refresh it everytime. There could be multiple reasons for doing so:\n",
					"\n",
					"  1. You do not want to continuosly refresh your index but instead want to do it periodically since you understand your workloads the best.  \n",
					"  2. You added/removed only a few files and do not want to wait for yet another refresh job to finish. \n",
					"\n",
					"To allow you to still use a stale index, Hyperspace introduces **Hybrid Scan**, a novel technique that allows users to utilize outdated or stale indexes (e.g., the underlying source data had some new files appended or existing files deleted), without refreshing indexes. \n",
					"\n",
					"To achieve this, when you set the appropriate configuration to enable Hybrid Scan, Hyperspace modifies the query plan to leverage the changes as following:\n",
					"- Appended files can be merged to index data by using **`Union` or `BucketUnion` (for join)**. Shuffling appended data can also be applied before merging, if needed.\n",
					"- Deleted files can be handled by injecting `Filter-NOT-IN` condition on **lineage column** of index data, so that the indexed rows from the deleted files can be excluded at query time. \n",
					"\n",
					"You can check the transformation of the query plan in below examples.\n",
					"\n",
					"    Note: Hybrid scan is only supported for non-partitioned data. Support for partitioned data is currently being worked upon."
				],
				"attachments": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Hybrid Scan for appended files - non-partitioned data\n",
					"\n",
					"Non-partitioned data is used in below example. In this example, we expect Join index can be used for the query and `BucketUnion` is introduced for appended files."
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"# GENERATE TEST DATA\n",
					"\n",
					"testdata = [\n",
					"    (\"orange\", 3, \"2020-10-01\"),\n",
					"    (\"banana\", 1, \"2020-10-01\"),\n",
					"    (\"carrot\", 5, \"2020-10-02\"),\n",
					"    (\"beetroot\", 12, \"2020-10-02\"),\n",
					"    (\"orange\", 2, \"2020-10-03\"),\n",
					"    (\"banana\", 11, \"2020-10-03\"),\n",
					"    (\"carrot\", 3, \"2020-10-03\"),\n",
					"    (\"beetroot\", 2, \"2020-10-04\"),\n",
					"    (\"cucumber\", 7, \"2020-10-05\"),\n",
					"    (\"pepper\", 20, \"2020-10-06\")\n",
					"]\n",
					"\n",
					"testdata_location = data_path + \"/productTable\"\n",
					"from pyspark.sql.types import StructField, StructType, StringType, IntegerType\n",
					"testdata_schema = StructType([\n",
					"    StructField('name', StringType(), True),\n",
					"    StructField('qty', IntegerType(), True),\n",
					"    StructField('date', StringType(), True)])\n",
					"\n",
					"test_df = spark.createDataFrame(testdata, testdata_schema)\n",
					"test_df.write.mode(\"overwrite\").parquet(testdata_location)\n",
					"test_df = spark.read.parquet(testdata_location)"
				],
				"attachments": null,
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"# CREATE INDEX\n",
					"hyperspace.createIndex(test_df, IndexConfig(\"productIndex2\", [\"name\"], [\"date\", \"qty\"]))\n",
					"\n",
					"spark.conf.set(\"spark.sql.autoBroadcastJoinThreshold\", -1)\n",
					"filter1 = test_df.filter(\"name = 'banana'\")\n",
					"filter2 = test_df.filter(\"qty > 10\")\n",
					"query = filter1.join(filter2, \"name\")\n",
					"\n",
					"# Check Join index rule is applied properly.\n",
					"hyperspace.explain(query, True, displayHTML)"
				],
				"attachments": null,
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"# Append new files.\r\n",
					"append_data = [\r\n",
					"    (\"orange\", 13, \"2020-11-01\"),\r\n",
					"    (\"banana\", 5, \"2020-11-01\")\r\n",
					"]\r\n",
					"append_df = spark.createDataFrame(append_data, testdata_schema)\r\n",
					"append_df.write.mode(\"append\").parquet(testdata_location)"
				],
				"attachments": null,
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"Hybrid scan is disabled by default. Therefore, you will see that since we appended new data, Hyperspace will decide NOT to use the index.\n",
					"\n",
					"In the output, you will see no plan differences (hence no highlighting)."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"# Hybrid Scan configs are false by default.\n",
					"spark.conf.set(\"spark.hyperspace.index.hybridscan.enabled\", \"false\")\n",
					"spark.conf.set(\"spark.hyperspace.index.hybridscan.delete.enabled\", \"false\")\n",
					"\n",
					"test_df_with_append = spark.read.parquet(testdata_location)\n",
					"filter1 = test_df_with_append.filter(\"name = 'banana'\")\n",
					"filter2 = test_df_with_append.filter(\"qty > 10\")\n",
					"query = filter1.join(filter2, \"name\")\n",
					"hyperspace.explain(query, True, displayHTML)\n",
					"query.show()"
				],
				"attachments": null,
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Enable Hybrid Scan\r\n",
					"\r\n",
					"In plan with indexes, you can see\r\n",
					"`Exchange hashpartitioning` required only for appended files so that we could still utilize the \"shuffled\" index data with appended files. `BucketUnion` is used to merge \"shuffled\" appended files with the index data."
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"# Enable Hybrid Scan config. \"delete\" config is not necessary.\n",
					"spark.conf.set(\"spark.hyperspace.index.hybridscan.enabled\", \"true\")\n",
					"# spark.conf.set(\"spark.hyperspace.index.hybridscan.delete.enabled\", \"true\")\n",
					"\n",
					"# Need to redefine query to recalculate the query plan.\n",
					"query = filter1.join(filter2, \"name\")\n",
					"hyperspace.explain(query, True, displayHTML)\n",
					"query.show()"
				],
				"attachments": null,
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Incremental Index Refresh\n",
					"When you ready to update your indexes but do not want to rebuild your entire index, Hyperspace supports updating indexes in an incremental manner using `hs.refreshIndex(\"name\", \"incremental\")` API. This will allow eliminate the need for a full rebuild of index from scratch, utilizing previously created index files as well as updating indexes on only the newly added data.\n",
					"\n",
					"Of course, please be sure to use the complementary `optimizeIndex` API (shown below) periodically to make sure you do not see performance regressions. We recommend calling `optimize` at least once for every 10 times you call `refreshIndex(..., \"incremental\")`, assuming the data you added/removed is < 10% of the original dataset. For instance, if your original dataset is 100 GB, and you've added/removed data in increments/decrements of 1 GB, you can call `refreshIndex` 10 times before calling `optimizeIndex`. Please note that this example is simply used for illustration and you have to adapt this for your workloads.\n",
					"\n",
					"In the example below, notice the addition of a `Sort` node in the query plan when indexes are used. This is because partial indexes are created on the appended data files, causing Spark to introduce a `Sort`. Please also note that `Shuffle` i.e. `Exchange` is still eliminated from the plan, giving you the appropriate acceleration."
				]
			},
			{
				"cell_type": "code",
				"source": [
					"def query():\n",
					"    test_df_with_append = spark.read.parquet(testdata_location)\n",
					"    filter1 = test_df_with_append.filter(\"name = 'banana'\")\n",
					"    filter2 = test_df_with_append.filter(\"qty > 10\")\n",
					"    return filter1.join(filter2, \"name\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"hyperspace.refreshIndex(\"productIndex2\", \"incremental\")\n",
					"\n",
					"hyperspace.explain(query(), True, displayHTML)\n",
					"query().show()"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Optimize Index layout\n",
					"After calling incremental refreshes multiple times on newly appended data (e.g. if the user writes to data in small batches or in case of streaming scenarios), the number of index files tend to become large affecting the performance of the index (large number of small files problem). Hyperspace provides `hyperspace.optimizeIndex(\"indexName\")` API to optimize the index layout and reduce the large files problem.\n",
					"\n",
					"In the plan below, notice that Hyperspace has removed the additional `Sort` node in the query plan. Optimize can help avoiding sorting for any index bucket which contains only one file. However, this will only be true if ALL the index buckets have at most 1 file per bucket, after `optimizeIndex`."
				]
			},
			{
				"cell_type": "code",
				"source": [
					"# Append some more data and call refresh again.\n",
					"append_data = [\n",
					"    (\"orange\", 13, \"2020-11-01\"),\n",
					"    (\"banana\", 5, \"2020-11-01\")\n",
					"]\n",
					"append_df = spark.createDataFrame(append_data, testdata_schema)\n",
					"append_df.write.mode(\"append\").parquet(testdata_location)\n",
					"\n",
					"hyperspace.refreshIndex(\"productIndex2\", \"incremental\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"# Call optimize. Ensure that Sort is removed after optimization (This is possible here because after optimize, in this case, every bucket contains only 1 file.).\n",
					"hyperspace.optimizeIndex(\"productIndex2\")\n",
					"\n",
					"hyperspace.explain(query(), True, displayHTML)"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Optimize modes\n",
					"\n",
					"The default mode for optimization is \"quick\" mode where files smaller than a predefined threshold are picked for optmization. To maximize the effect of optimization, Hyperspace allows another optimize mode \"full\" as shown below. This mode picks ALL index files for optimization irrespective of their file size and creates the best possible layout of the index. This is also slower than the default optimize mode because more data is being processed here.\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"hyperspace.optimizeIndex(\"productIndex2\", \"full\")\n",
					"\n",
					"hyperspace.explain(query(), True, displayHTML)"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Clean Up\n",
					"To make this notebook self-contained and not leave any dangling data, we have some small clean-up code below. "
				]
			},
			{
				"cell_type": "code",
				"source": [
					"mssparkutils.fs.rm(data_path, True)\n",
					"mssparkutils.fs.rm(index_location, True)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"For latest documentation please run TokenLibrary.help() from Notebook\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"# By default Synapse uses AAD passthrough for authentication\n",
					"# However, Linked services can be used for storing and retreiving credentials (e.g, account key)\n",
					"# Example connection string (for storage): \"DefaultEndpointsProtocol=https;AccountName=<accountname>;AccountKey=<accountkey>\"\n",
					"\n",
					"connection_string = TokenLibrary.getConnectionString(\"<hozhao0924gen2>\")\n",
					"account_key = TokenLibrary.getConnectionStringAsMap(\"<hozhao0924gen2>\").get(\"gEPzlPZdvXJFRlMacVsj13Sy4c1WSPRwBdaE63AtX+oS9h2/AV48zYZJ46iiAn6lyTNUydGFbIZfSKUctpfHKQ==\")"
				],
				"execution_count": null
			}
		]
	}
}