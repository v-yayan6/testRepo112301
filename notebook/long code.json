{
	"name": "long code",
	"properties": {
		"folder": {
			"name": "New folder"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2"
			}
		},
		"metadata": {
			"saveOutput": true,
			"language_info": {
				"name": "scala"
			}
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"import org.apache.spark.HashPartitioner\n",
					"val sc = spark.sparkContext\n",
					"val data1 = Array[(Int, Char)](\n",
					"  (1, 'a'), (2, 'b'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (2, 'g'), (1, 'h'))\n",
					"\n",
					"val rangePairs1 = sc.parallelize(data1, 3)\n",
					"\n",
					"val hashPairs1 = rangePairs1.partitionBy(new HashPartitioner(3))\n",
					"\n",
					"val data2 = Array[(Int, String)]((1, \"A\"), (2, \"B\"),\n",
					"  (3, \"C\"), (4, \"D\"))\n",
					"\n",
					"val pairs2 = sc.parallelize(data2, 2)\n",
					"val rangePairs2 = pairs2.map(x => (x._1, x._2.charAt(0)))\n",
					"\n",
					"\n",
					"val data3 = Array[(Int, Char)]((1, 'X'), (2, 'Y'))\n",
					"val rangePairs3 = sc.parallelize(data3, 2)\n",
					"\n",
					"\n",
					"val rangePairs = rangePairs2.union(rangePairs3)\n",
					"\n",
					"\n",
					"val result = hashPairs1.join(rangePairs)\n",
					"\n",
					"print(result.collect())"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"import org.apache.spark.HashPartitioner\n",
					"val sc = spark.sparkContext\n",
					"val data1 = Array[(Int, Char)](\n",
					"  (1, 'a'), (2, 'b'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (2, 'g'), (1, 'h'))\n",
					"\n",
					"val rangePairs1 = sc.parallelize(data1, 3)\n",
					"\n",
					"val hashPairs1 = rangePairs1.partitionBy(new HashPartitioner(3))\n",
					"\n",
					"\n",
					"val data2 = Array[(Int, String)]((1, \"A\"), (2, \"B\"),\n",
					"  (3, \"C\"), (4, \"D\"))\n",
					"\n",
					"val pairs2 = sc.parallelize(data2, 2)\n",
					"val rangePairs2 = pairs2.map(x => (x._1, x._2.charAt(0)))\n",
					"\n",
					"\n",
					"val data3 = Array[(Int, Char)]((1, 'X'), (2, 'Y'))\n",
					"val rangePairs3 = sc.parallelize(data3, 2)\n",
					"\n",
					"\n",
					"val rangePairs = rangePairs2.union(rangePairs3)\n",
					"\n",
					"\n",
					"val result = hashPairs1.join(rangePairs)\n",
					"\n",
					"print(result.collect())"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"source": [
					"import org.apache.spark.HashPartitioner\n",
					"val sc = spark.sparkContext\n",
					"val data1 = Array[(Int, Char)](\n",
					"  (1, 'a'), (2, 'b'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (2, 'g'), (1, 'h'))\n",
					"\n",
					"val rangePairs1 = sc.parallelize(data1, 3)\n",
					"\n",
					"val hashPairs1 = rangePairs1.partitionBy(new HashPartitioner(3))\n",
					"\n",
					"\n",
					"val data2 = Array[(Int, String)]((1, \"A\"), (2, \"B\"),\n",
					"  (3, \"C\"), (4, \"D\"))\n",
					"\n",
					"val pairs2 = sc.parallelize(data2, 2)\n",
					"val rangePairs2 = pairs2.map(x => (x._1, x._2.charAt(0)))\n",
					"\n",
					"\n",
					"val data3 = Array[(Int, Char)]((1, 'X'), (2, 'Y'))\n",
					"val rangePairs3 = sc.parallelize(data3, 2)\n",
					"\n",
					"\n",
					"val rangePairs = rangePairs2.union(rangePairs3)\n",
					"\n",
					"\n",
					"val result = hashPairs1.join(rangePairs)\n",
					"\n",
					"print(result.collect())"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"source": [
					"import org.apache.spark.HashPartitioner\n",
					"val sc = spark.sparkContext\n",
					"val data1 = Array[(Int, Char)](\n",
					"  (1, 'a'), (2, 'b'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (2, 'g'), (1, 'h'))\n",
					"\n",
					"val rangePairs1 = sc.parallelize(data1, 3)\n",
					"\n",
					"val hashPairs1 = rangePairs1.partitionBy(new HashPartitioner(3))\n",
					"\n",
					"\n",
					"val data2 = Array[(Int, String)]((1, \"A\"), (2, \"B\"),\n",
					"  (3, \"C\"), (4, \"D\"))\n",
					"\n",
					"val pairs2 = sc.parallelize(data2, 2)\n",
					"val rangePairs2 = pairs2.map(x => (x._1, x._2.charAt(0)))\n",
					"\n",
					"\n",
					"val data3 = Array[(Int, Char)]((1, 'X'), (2, 'Y'))\n",
					"val rangePairs3 = sc.parallelize(data3, 2)\n",
					"\n",
					"\n",
					"val rangePairs = rangePairs2.union(rangePairs3)\n",
					"\n",
					"\n",
					"val result = hashPairs1.join(rangePairs)\n",
					"\n",
					"print(result.collect())"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"source": [
					"import org.apache.spark.HashPartitioner\n",
					"val sc = spark.sparkContext\n",
					"val data1 = Array[(Int, Char)](\n",
					"  (1, 'a'), (2, 'b'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (2, 'g'), (1, 'h'))\n",
					"\n",
					"val rangePairs1 = sc.parallelize(data1, 3)\n",
					"\n",
					"val hashPairs1 = rangePairs1.partitionBy(new HashPartitioner(3))\n",
					"\n",
					"\n",
					"val data2 = Array[(Int, String)]((1, \"A\"), (2, \"B\"),\n",
					"  (3, \"C\"), (4, \"D\"))\n",
					"\n",
					"val pairs2 = sc.parallelize(data2, 2)\n",
					"val rangePairs2 = pairs2.map(x => (x._1, x._2.charAt(0)))\n",
					"\n",
					"\n",
					"val data3 = Array[(Int, Char)]((1, 'X'), (2, 'Y'))\n",
					"val rangePairs3 = sc.parallelize(data3, 2)\n",
					"\n",
					"\n",
					"val rangePairs = rangePairs2.union(rangePairs3)\n",
					"\n",
					"\n",
					"val result = hashPairs1.join(rangePairs)\n",
					"\n",
					"print(result.collect())"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"source": [
					"import org.apache.spark.HashPartitioner\n",
					"val sc = spark.sparkContext\n",
					"val data1 = Array[(Int, Char)](\n",
					"  (1, 'a'), (2, 'b'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (2, 'g'), (1, 'h'))\n",
					"\n",
					"val rangePairs1 = sc.parallelize(data1, 3)\n",
					"\n",
					"val hashPairs1 = rangePairs1.partitionBy(new HashPartitioner(3))\n",
					"\n",
					"\n",
					"val data2 = Array[(Int, String)]((1, \"A\"), (2, \"B\"),\n",
					"  (3, \"C\"), (4, \"D\"))\n",
					"\n",
					"val pairs2 = sc.parallelize(data2, 2)\n",
					"val rangePairs2 = pairs2.map(x => (x._1, x._2.charAt(0)))\n",
					"\n",
					"\n",
					"val data3 = Array[(Int, Char)]((1, 'X'), (2, 'Y'))\n",
					"val rangePairs3 = sc.parallelize(data3, 2)\n",
					"\n",
					"\n",
					"val rangePairs = rangePairs2.union(rangePairs3)\n",
					"\n",
					"\n",
					"val result = hashPairs1.join(rangePairs)\n",
					"\n",
					"print(result.collect())"
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"source": [
					"import org.apache.spark.HashPartitioner\n",
					"val sc = spark.sparkContext\n",
					"val data1 = Array[(Int, Char)](\n",
					"  (1, 'a'), (2, 'b'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (2, 'g'), (1, 'h'))\n",
					"\n",
					"val rangePairs1 = sc.parallelize(data1, 3)\n",
					"\n",
					"val hashPairs1 = rangePairs1.partitionBy(new HashPartitioner(3))\n",
					"\n",
					"\n",
					"val data2 = Array[(Int, String)]((1, \"A\"), (2, \"B\"),\n",
					"  (3, \"C\"), (4, \"D\"))\n",
					"\n",
					"val pairs2 = sc.parallelize(data2, 2)\n",
					"val rangePairs2 = pairs2.map(x => (x._1, x._2.charAt(0)))\n",
					"\n",
					"\n",
					"val data3 = Array[(Int, Char)]((1, 'X'), (2, 'Y'))\n",
					"val rangePairs3 = sc.parallelize(data3, 2)\n",
					"\n",
					"\n",
					"val rangePairs = rangePairs2.union(rangePairs3)\n",
					"\n",
					"\n",
					"val result = hashPairs1.join(rangePairs)\n",
					"\n",
					"print(result.collect())"
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"source": [
					"import org.apache.spark.HashPartitioner\n",
					"val sc = spark.sparkContext\n",
					"val data1 = Array[(Int, Char)](\n",
					"  (1, 'a'), (2, 'b'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (2, 'g'), (1, 'h'))\n",
					"\n",
					"val rangePairs1 = sc.parallelize(data1, 3)\n",
					"\n",
					"val hashPairs1 = rangePairs1.partitionBy(new HashPartitioner(3))\n",
					"\n",
					"\n",
					"val data2 = Array[(Int, String)]((1, \"A\"), (2, \"B\"),\n",
					"  (3, \"C\"), (4, \"D\"))\n",
					"\n",
					"val pairs2 = sc.parallelize(data2, 2)\n",
					"val rangePairs2 = pairs2.map(x => (x._1, x._2.charAt(0)))\n",
					"\n",
					"\n",
					"val data3 = Array[(Int, Char)]((1, 'X'), (2, 'Y'))\n",
					"val rangePairs3 = sc.parallelize(data3, 2)\n",
					"\n",
					"\n",
					"val rangePairs = rangePairs2.union(rangePairs3)\n",
					"\n",
					"\n",
					"val result = hashPairs1.join(rangePairs)\n",
					"\n",
					"print(result.collect())"
				],
				"execution_count": 10
			},
			{
				"cell_type": "code",
				"source": [
					"import org.apache.spark.HashPartitioner\n",
					"val sc = spark.sparkContext\n",
					"val data1 = Array[(Int, Char)](\n",
					"  (1, 'a'), (2, 'b'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (2, 'g'), (1, 'h'))\n",
					"\n",
					"val rangePairs1 = sc.parallelize(data1, 3)\n",
					"\n",
					"val hashPairs1 = rangePairs1.partitionBy(new HashPartitioner(3))\n",
					"\n",
					"\n",
					"val data2 = Array[(Int, String)]((1, \"A\"), (2, \"B\"),\n",
					"  (3, \"C\"), (4, \"D\"))\n",
					"\n",
					"val pairs2 = sc.parallelize(data2, 2)\n",
					"val rangePairs2 = pairs2.map(x => (x._1, x._2.charAt(0)))\n",
					"\n",
					"\n",
					"val data3 = Array[(Int, Char)]((1, 'X'), (2, 'Y'))\n",
					"val rangePairs3 = sc.parallelize(data3, 2)\n",
					"\n",
					"\n",
					"val rangePairs = rangePairs2.union(rangePairs3)\n",
					"\n",
					"\n",
					"val result = hashPairs1.join(rangePairs)\n",
					"\n",
					"print(result.collect())"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"import org.apache.spark.HashPartitioner\n",
					"val sc = spark.sparkContext\n",
					"val data1 = Array[(Int, Char)](\n",
					"  (1, 'a'), (2, 'b'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (3, 'c'), (4, 'd'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (5, 'e'), (3, 'f'),\n",
					"  (2, 'g'), (1, 'h'))\n",
					"\n",
					"val rangePairs1 = sc.parallelize(data1, 3)\n",
					"\n",
					"val hashPairs1 = rangePairs1.partitionBy(new HashPartitioner(3))\n",
					"\n",
					"\n",
					"val data2 = Array[(Int, String)]((1, \"A\"), (2, \"B\"),\n",
					"  (3, \"C\"), (4, \"D\"))\n",
					"\n",
					"val pairs2 = sc.parallelize(data2, 2)\n",
					"val rangePairs2 = pairs2.map(x => (x._1, x._2.charAt(0)))\n",
					"\n",
					"\n",
					"val data3 = Array[(Int, Char)]((1, 'X'), (2, 'Y'))\n",
					"val rangePairs3 = sc.parallelize(data3, 2)\n",
					"\n",
					"\n",
					"val rangePairs = rangePairs2.union(rangePairs3)\n",
					"\n",
					"\n",
					"val result = hashPairs1.join(rangePairs)\n",
					"\n",
					"print(result.collect())"
				],
				"execution_count": 12
			}
		]
	}
}